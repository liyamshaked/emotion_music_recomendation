{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cawwe_nsyEYbQdKJCq-sPIgSYMgGY20K","timestamp":1739996285656}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports"],"metadata":{"id":"54Nc2GdGPRUh"}},{"cell_type":"code","execution_count":74,"metadata":{"id":"RqVyx74iEy3b","executionInfo":{"status":"ok","timestamp":1746264818973,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn import preprocessing\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","import seaborn as sns\n","import google.colab\n","import numpy as np\n","from sklearn.feature_selection import mutual_info_regression\n","import scipy.stats as stats\n","from sklearn.feature_selection import f_classif"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SZvKVjc5UaO1","executionInfo":{"status":"ok","timestamp":1746264821761,"user_tz":-180,"elapsed":1245,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"4c21978d-977b-4426-e06e-4969373a1a42"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["music_df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/project/Music/light_spotify_dataset.csv\")"],"metadata":{"id":"FXd5PEY6eP8h","executionInfo":{"status":"ok","timestamp":1746264823605,"user_tz":-180,"elapsed":904,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":["# EDA and cleaning"],"metadata":{"id":"WnDTzx4ajw-w"}},{"cell_type":"code","source":["import re\n","\n","def normalize_cell(val):\n","    if isinstance(val, str):\n","        # Lowercase\n","        #val = val.lower()\n","        # Remove leading/trailing spaces\n","        val = val.strip()\n","        # Replace multiple spaces inside with a single space\n","        val = re.sub(r'\\s+', ' ', val)\n","        return val\n","    else:\n","        return val  # return numbers unchanged\n","\n","def normalize_dataframe(df):\n","    df.columns = [normalize_cell(col) for col in df.columns]\n","    df.columns = [x.lower() for x in df.columns] # Apply lower to each element of the Index\n","    df = df.applymap(normalize_cell)\n","    return df"],"metadata":{"id":"zFAdQG9GovFq","executionInfo":{"status":"ok","timestamp":1746264824502,"user_tz":-180,"elapsed":2,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["thirst_rows = music_df[music_df['emotion'] == 'thirst']\n","pink_rows = music_df[music_df['emotion'] == 'pink']\n","true_rows = music_df[music_df['emotion'] == 'True']\n","combined_rows = pd.concat([thirst_rows, pink_rows, true_rows])\n","df = music_df.copy()\n","df = df[~df['emotion'].isin(['thirst', 'pink', 'True'])]\n","df.loc[df['emotion'] == 'angry', 'emotion'] = 'anger'\n","df.groupby('emotion').size()\n","df = normalize_dataframe(df)\n","df = df.dropna()\n","df = df.drop_duplicates()\n","top_genres = df['genre'].value_counts().nlargest(11).index\n","df['genre']=df['genre'].apply(lambda x: x if x in top_genres else 'other')\n","df['genre']=df['genre'].replace('Unknown,Unknown,Unknown','other')\n","#print(df['Genre'].value_counts(normalize=True).sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iuESzHg8lu6E","executionInfo":{"status":"ok","timestamp":1746264906253,"user_tz":-180,"elapsed":4148,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"b193164c-a5dd-457a-9404-245988ca0bd7"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-77-cd6ae81b7231>:18: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n","  df = df.applymap(normalize_cell)\n"]}]},{"cell_type":"code","source":["#df.groupby('genre').size()"],"metadata":{"id":"EFeQw65FlEq1","executionInfo":{"status":"ok","timestamp":1746265016908,"user_tz":-180,"elapsed":11,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Example: assuming your DataFrame is named df and has a column 'key' like \"A Maj\"\n","# df = pd.read_csv('your_file.csv')  # if reading from file\n","\n","# 1️⃣ Split 'key' into 'pitch' and 'mode_str'\n","df[['pitch', 'mode_str']] = df['key'].str.split(' ', expand=True)\n","\n","# 2️⃣ Map pitch names to integers (Spotify key values)\n","pitch_class_map = {\n","    'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5,\n","    'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11\n","}\n","df['key_int'] = df['pitch'].map(pitch_class_map)\n","\n","# 3️⃣ Map mode strings to integers (Spotify mode values)\n","mode_map = {'Maj': 1, 'min': 0}\n","df['mode_int'] = df['mode_str'].map(mode_map)\n","\n","# 4️⃣ Define function for circular encoding of key\n","def encode_key_circular(key):\n","    if pd.isna(key):\n","        return (0.0, 0.0)  # handle missing keys\n","    angle = 2 * np.pi * key / 12\n","    return np.cos(angle), np.sin(angle)\n","\n","# 5️⃣ Apply circular encoding\n","df['cos_pitch'], df['sin_pitch'] = zip(*df['key_int'].map(encode_key_circular))\n","\n","# ✅ DONE → final DataFrame now has columns: 'key_int', 'mode_int', 'cos_pitch', 'sin_pitch'\n"],"metadata":{"id":"A8Tf-9U4KgSm","executionInfo":{"status":"ok","timestamp":1746264943624,"user_tz":-180,"elapsed":2171,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":89,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"ygpRcMs8KroY","executionInfo":{"status":"ok","timestamp":1746264946292,"user_tz":-180,"elapsed":36,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"e71f71e5-cd1d-4222-c7b6-01186a9061d2"},"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  artist                   song  emotion  variance genre  release date     key  tempo  loudness explicit  ...  speechiness  liveness  acousticness  instrumentalness  pitch  mode_str  key_int  \\\n","0   ABBA  She's My Kind Of Girl      joy  0.447619   pop          2014   F Maj    128     -6.00       No  ...            3        31             7                 0      F       Maj        5   \n","1   ABBA       Andante, Andante     love  0.202222   pop          1980  A# Maj    102    -10.72       No  ...            2         7            68                 0     A#       Maj       10   \n","2   ABBA         As Good As New  sadness  0.300881   pop          1979   E Maj    139     -5.70       No  ...            3         8            20                 2      E       Maj        4   \n","3   ABBA                   Bang      joy  0.355000   pop          1975   F Maj    132     -3.00       No  ...            3        32             3                 0      F       Maj        5   \n","4   ABBA       Bang-A-Boomerang      joy  0.355000   pop          1975   F Maj    132     -3.00       No  ...            3        32             3                 0      F       Maj        5   \n","\n","   mode_int cos_pitch sin_pitch  \n","0         1 -0.866025  0.500000  \n","1         1  0.500000 -0.866025  \n","2         1 -0.500000  0.866025  \n","3         1 -0.866025  0.500000  \n","4         1 -0.866025  0.500000  \n","\n","[5 rows x 24 columns]"],"text/html":["\n","  <div id=\"df-0d419bb2-f788-47b8-aa37-f7d22a082219\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>artist</th>\n","      <th>song</th>\n","      <th>emotion</th>\n","      <th>variance</th>\n","      <th>genre</th>\n","      <th>release date</th>\n","      <th>key</th>\n","      <th>tempo</th>\n","      <th>loudness</th>\n","      <th>explicit</th>\n","      <th>...</th>\n","      <th>speechiness</th>\n","      <th>liveness</th>\n","      <th>acousticness</th>\n","      <th>instrumentalness</th>\n","      <th>pitch</th>\n","      <th>mode_str</th>\n","      <th>key_int</th>\n","      <th>mode_int</th>\n","      <th>cos_pitch</th>\n","      <th>sin_pitch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ABBA</td>\n","      <td>She's My Kind Of Girl</td>\n","      <td>joy</td>\n","      <td>0.447619</td>\n","      <td>pop</td>\n","      <td>2014</td>\n","      <td>F Maj</td>\n","      <td>128</td>\n","      <td>-6.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>31</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ABBA</td>\n","      <td>Andante, Andante</td>\n","      <td>love</td>\n","      <td>0.202222</td>\n","      <td>pop</td>\n","      <td>1980</td>\n","      <td>A# Maj</td>\n","      <td>102</td>\n","      <td>-10.72</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>68</td>\n","      <td>0</td>\n","      <td>A#</td>\n","      <td>Maj</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0.500000</td>\n","      <td>-0.866025</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ABBA</td>\n","      <td>As Good As New</td>\n","      <td>sadness</td>\n","      <td>0.300881</td>\n","      <td>pop</td>\n","      <td>1979</td>\n","      <td>E Maj</td>\n","      <td>139</td>\n","      <td>-5.70</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>E</td>\n","      <td>Maj</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>-0.500000</td>\n","      <td>0.866025</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ABBA</td>\n","      <td>Bang</td>\n","      <td>joy</td>\n","      <td>0.355000</td>\n","      <td>pop</td>\n","      <td>1975</td>\n","      <td>F Maj</td>\n","      <td>132</td>\n","      <td>-3.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ABBA</td>\n","      <td>Bang-A-Boomerang</td>\n","      <td>joy</td>\n","      <td>0.355000</td>\n","      <td>pop</td>\n","      <td>1975</td>\n","      <td>F Maj</td>\n","      <td>132</td>\n","      <td>-3.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d419bb2-f788-47b8-aa37-f7d22a082219')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0d419bb2-f788-47b8-aa37-f7d22a082219 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0d419bb2-f788-47b8-aa37-f7d22a082219');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3f1d5070-971f-4eac-8553-d68b0c76c5f2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f1d5070-971f-4eac-8553-d68b0c76c5f2')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3f1d5070-971f-4eac-8553-d68b0c76c5f2 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["numerical_columns = ['variance','tempo','loudness','popularity','energy','danceability','positiveness','speechiness',\n","                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int','key_int']\n","\n","df[numerical_columns].hist(bins=15, figsize=(15, 10))\n","plt.suptitle('Distribution of Numerical Variables')\n","plt.show()\n","\n","# Frequency of categorical variables\n","print()\n","print(df['genre'].value_counts())\n","\n","# Top 10 most frequent artists\n","print()\n","print(df['artist'].value_counts().head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"YOqf2D0oq59R","executionInfo":{"status":"ok","timestamp":1746264956353,"user_tz":-180,"elapsed":2029,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"cfe9df98-787b-4071-d925-623db6a7ee42"},"execution_count":91,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 16 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","genre\n","other          68274\n","pop            46881\n","rap            33201\n","alternative    19047\n","hip-hop        17316\n","rock           12956\n","folk           10620\n","metal          10489\n","soul            8740\n","electronic      5144\n","jazz            4301\n","Name: count, dtype: int64\n","\n","artist\n","Genius English Translations    1604\n","Lil Wayne                       753\n","Juice WRLD                      647\n","Chris Brown                     589\n","Gucci Mane                      522\n","Drake                           513\n","Kanye West                      471\n","BONES                           456\n","Chief Keef                      453\n","Eminem                          423\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["#feature_columns = ['variance','tempo','loudness','energy','danceability','positiveness','speechiness',\n","#                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","#import seaborn as sns\n","#import matplotlib.pyplot as plt\n","\n","# Compute correlation matrix (no need to scale)\n","#corr_matrix = df[feature_columns].corr()\n","\n","# Display the correlation matrix numerically\n","#print(corr_matrix)\n","\n","# Plot heatmap\n","#plt.figure(figsize=(12, 10))\n","#sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', vmin=-1, vmax=1, square=True, linewidths=0.5)\n","#plt.title(\"Feature Correlation Matrix\")\n","#plt.show()\n"],"metadata":{"id":"aCRsPLbcOBmd","executionInfo":{"status":"ok","timestamp":1746265025527,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":95,"outputs":[]},{"cell_type":"markdown","source":["# Model"],"metadata":{"id":"33p2vdL0j30v"}},{"cell_type":"code","source":["'''#!pip install tqdm\n","from tqdm import tqdm\n","from sklearn.neighbors import NearestNeighbors # Import NearestNeighbors\n","from kneed import KneeLocator # Import KneeLocator\n","\n","\n","feature_columns = ['variance','tempo','loudness','energy','danceability','positiveness','speechiness',\n","                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","scaler = StandardScaler()\n","scaled_features_train = scaler.fit_transform(train_data[feature_columns])\n","scaled_features_test = scaler.transform(test_data[feature_columns])\n","\n","n_train_samples = scaled_features_train.shape[0]\n","\n","# Range of k values to test\n","k_values = list(range(1, 31))\n","mean_distances = []\n","\n","# Progress bar\n","progress_bar = tqdm(k_values, desc=\"Starting k testing\", unit=\"k\")\n","\n","# Find optimal k\n","for idx, k in enumerate(progress_bar, start=1):\n","    progress_bar.set_description(f\"Training k={k} ({idx}/{len(k_values)}) on {n_train_samples} train samples\")\n","\n","    model = NearestNeighbors(n_neighbors=k, metric='cosine')\n","    model.fit(scaled_features_train)\n","\n","    distances, indices = model.kneighbors(scaled_features_train)\n","\n","    mean_distance = np.mean(distances)\n","    mean_distances.append(mean_distance)\n","\n","# Plot mean distance vs. k\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, mean_distances, marker='o')\n","plt.title('Average Distance for Different Values of k')\n","plt.xlabel('Number of Neighbors (k)')\n","plt.ylabel('Average Distance')\n","plt.grid(True)\n","plt.show()\n","\n","# Get best k\n","best_k_min = k_values[np.argmin(mean_distances)]\n","print(f\"Best k (min distance): {best_k_min}\")\n","\n","# Optional: elbow detection\n","kneedle = KneeLocator(k_values, mean_distances, curve='convex', direction='decreasing')\n","best_k_elbow = kneedle.knee\n","print(f\"Best k (elbow method): {best_k_elbow}\")\n","\n","# Use elbow if found, else min distance\n","final_k = best_k_elbow if best_k_elbow else best_k_min\n","\n","# Train final model on train data\n","model = NearestNeighbors(n_neighbors=final_k, metric='cosine')\n","model.fit(scaled_features_train)\n","\n","# Recommend function (can search train or test song)\n","\n","\n","# Example recommendation (from test set)'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"P2pgPYAh0KN0","executionInfo":{"status":"ok","timestamp":1746265609644,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"22414542-e488-4229-dc0c-0951d8877e2f"},"execution_count":123,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'#!pip install tqdm\\nfrom tqdm import tqdm\\nfrom sklearn.neighbors import NearestNeighbors # Import NearestNeighbors\\nfrom kneed import KneeLocator # Import KneeLocator\\n\\n\\nfeature_columns = [\\'variance\\',\\'tempo\\',\\'loudness\\',\\'energy\\',\\'danceability\\',\\'positiveness\\',\\'speechiness\\',\\n                     \\'liveness\\',\\'acousticness\\', \\'instrumentalness\\',\\'cos_pitch\\', \\'sin_pitch\\', \\'mode_int\\']\\nscaler = StandardScaler()\\nscaled_features_train = scaler.fit_transform(train_data[feature_columns])\\nscaled_features_test = scaler.transform(test_data[feature_columns])\\n\\nn_train_samples = scaled_features_train.shape[0]\\n\\n# Range of k values to test\\nk_values = list(range(1, 31))\\nmean_distances = []\\n\\n# Progress bar\\nprogress_bar = tqdm(k_values, desc=\"Starting k testing\", unit=\"k\")\\n\\n# Find optimal k\\nfor idx, k in enumerate(progress_bar, start=1):\\n    progress_bar.set_description(f\"Training k={k} ({idx}/{len(k_values)}) on {n_train_samples} train samples\")\\n\\n    model = NearestNeighbors(n_neighbors=k, metric=\\'cosine\\')\\n    model.fit(scaled_features_train)\\n\\n    distances, indices = model.kneighbors(scaled_features_train)\\n\\n    mean_distance = np.mean(distances)\\n    mean_distances.append(mean_distance)\\n\\n# Plot mean distance vs. k\\nplt.figure(figsize=(10, 6))\\nplt.plot(k_values, mean_distances, marker=\\'o\\')\\nplt.title(\\'Average Distance for Different Values of k\\')\\nplt.xlabel(\\'Number of Neighbors (k)\\')\\nplt.ylabel(\\'Average Distance\\')\\nplt.grid(True)\\nplt.show()\\n\\n# Get best k\\nbest_k_min = k_values[np.argmin(mean_distances)]\\nprint(f\"Best k (min distance): {best_k_min}\")\\n\\n# Optional: elbow detection\\nkneedle = KneeLocator(k_values, mean_distances, curve=\\'convex\\', direction=\\'decreasing\\')\\nbest_k_elbow = kneedle.knee\\nprint(f\"Best k (elbow method): {best_k_elbow}\")\\n\\n# Use elbow if found, else min distance\\nfinal_k = best_k_elbow if best_k_elbow else best_k_min\\n\\n# Train final model on train data\\nmodel = NearestNeighbors(n_neighbors=final_k, metric=\\'cosine\\')\\nmodel.fit(scaled_features_train)\\n\\n# Recommend function (can search train or test song)\\n\\n\\n# Example recommendation (from test set)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":123}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Sample 10% of the data\n","sample_size = 0.05\n","train_data, test_data = train_test_split(df.sample(frac=sample_size, random_state=42), test_size=0.25, random_state=42)\n","train_data = train_data.reset_index(drop=True)\n","test_data = test_data.reset_index(drop=True)\n","print(\"Viewing training x_train\", train_data.shape)\n","print(\"Viewing test test_data\", test_data.shape)\n","\n","# Scale only on train_data\n","#scaler = StandardScaler()\n","#scaled_features = scaler.fit_transform(train_data[feature_columns])\n","#n_samples = scaled_features.shape[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ipdpyg8QsWh8","executionInfo":{"status":"ok","timestamp":1746269153225,"user_tz":-180,"elapsed":58,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"1f584b26-aae4-4eda-f445-85bcdc255020"},"execution_count":176,"outputs":[{"output_type":"stream","name":"stdout","text":["Viewing training x_train (8886, 24)\n","Viewing test test_data (2962, 24)\n"]}]},{"cell_type":"code","source":["#!pip install kneed\n","#!pip install tqdm"],"metadata":{"id":"sNzzoE1MzCRz","executionInfo":{"status":"ok","timestamp":1746269153869,"user_tz":-180,"elapsed":4,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":177,"outputs":[]},{"cell_type":"code","source":["'''#!pip install tqdm\n","from tqdm import tqdm\n","from sklearn.neighbors import NearestNeighbors # Import NearestNeighbors\n","from kneed import KneeLocator # Import KneeLocator\n","\n","feature_columns = ['tempo','loudness','energy','danceability','positiveness','speechiness',\n","                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","# === Scaling\n","scaler = StandardScaler()\n","scaled_features_train = scaler.fit_transform(train_data[feature_columns])\n","scaled_features_test = scaler.transform(test_data[feature_columns])\n","\n","# === Mahalanobis pre-transform\n","cov_matrix = np.cov(scaled_features_train, rowvar=False)\n","inv_cov_matrix = np.linalg.inv(cov_matrix)\n","from scipy.linalg import sqrtm\n","L = sqrtm(inv_cov_matrix)\n","if np.iscomplexobj(L): L = L.real\n","\n","transformed_train = scaled_features_train @ L.T\n","transformed_test = scaled_features_test @ L.T\n","\n","# === k-NN loop\n","k_values = list(range(1, 31))\n","mean_distances = []\n","progress_bar = tqdm(k_values, desc=\"Starting k testing\", unit=\"k\")\n","\n","for idx, k in enumerate(progress_bar, start=1):\n","    progress_bar.set_description(f\"Training k={k} ({idx}/{len(k_values)}) on {n_train_samples} samples\")\n","    # Request k+1 neighbors to include self-neighbor\n","    model = NearestNeighbors(n_neighbors=k+1, metric='euclidean')\n","    model.fit(transformed_train)\n","    distances, indices = model.kneighbors(transformed_train)\n","    # Skip self-neighbor at index 0\n","    mean_distance = np.mean(distances[:, 1:k+1])\n","    mean_distances.append(mean_distance)\n","\n","# === Plot\n","plt.figure(figsize=(10,6))\n","plt.plot(k_values, mean_distances, marker='o')\n","plt.xlabel('k')\n","plt.ylabel('Avg Distance')\n","plt.title('k vs Mean Distance')\n","plt.show()\n","\n","# === Choose best k\n","best_k_min = k_values[np.argmin(mean_distances)]\n","print(f\"Best k (min distance): {best_k_min}\")\n","kneedle = KneeLocator(k_values, mean_distances, curve='convex', direction='decreasing')\n","best_k_elbow = kneedle.knee\n","print(f\"Best k (elbow): {best_k_elbow}\")\n","final_k = best_k_elbow if best_k_elbow else best_k_min\n","\n","# === Final model\n","model = NearestNeighbors(n_neighbors=final_k, metric='euclidean')\n","model.fit(transformed_train)\n","\n","# === Query example\n","distances, indices = model.kneighbors(transformed_test)'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"644Ea1dssfCr","executionInfo":{"status":"ok","timestamp":1746269154459,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"703f7ad3-c8f7-4f79-95c5-81b37edf0cb9"},"execution_count":178,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'#!pip install tqdm\\nfrom tqdm import tqdm\\nfrom sklearn.neighbors import NearestNeighbors # Import NearestNeighbors\\nfrom kneed import KneeLocator # Import KneeLocator\\n\\nfeature_columns = [\\'tempo\\',\\'loudness\\',\\'energy\\',\\'danceability\\',\\'positiveness\\',\\'speechiness\\',\\n                     \\'liveness\\',\\'acousticness\\', \\'instrumentalness\\',\\'cos_pitch\\', \\'sin_pitch\\', \\'mode_int\\']\\n# === Scaling\\nscaler = StandardScaler()\\nscaled_features_train = scaler.fit_transform(train_data[feature_columns])\\nscaled_features_test = scaler.transform(test_data[feature_columns])\\n\\n# === Mahalanobis pre-transform\\ncov_matrix = np.cov(scaled_features_train, rowvar=False)\\ninv_cov_matrix = np.linalg.inv(cov_matrix)\\nfrom scipy.linalg import sqrtm\\nL = sqrtm(inv_cov_matrix)\\nif np.iscomplexobj(L): L = L.real\\n\\ntransformed_train = scaled_features_train @ L.T\\ntransformed_test = scaled_features_test @ L.T\\n\\n# === k-NN loop\\nk_values = list(range(1, 31))\\nmean_distances = []\\nprogress_bar = tqdm(k_values, desc=\"Starting k testing\", unit=\"k\")\\n\\nfor idx, k in enumerate(progress_bar, start=1):\\n    progress_bar.set_description(f\"Training k={k} ({idx}/{len(k_values)}) on {n_train_samples} samples\")\\n    # Request k+1 neighbors to include self-neighbor\\n    model = NearestNeighbors(n_neighbors=k+1, metric=\\'euclidean\\')\\n    model.fit(transformed_train)\\n    distances, indices = model.kneighbors(transformed_train)\\n    # Skip self-neighbor at index 0\\n    mean_distance = np.mean(distances[:, 1:k+1])\\n    mean_distances.append(mean_distance)\\n\\n# === Plot\\nplt.figure(figsize=(10,6))\\nplt.plot(k_values, mean_distances, marker=\\'o\\')\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Avg Distance\\')\\nplt.title(\\'k vs Mean Distance\\')\\nplt.show()\\n\\n# === Choose best k\\nbest_k_min = k_values[np.argmin(mean_distances)]\\nprint(f\"Best k (min distance): {best_k_min}\")\\nkneedle = KneeLocator(k_values, mean_distances, curve=\\'convex\\', direction=\\'decreasing\\')\\nbest_k_elbow = kneedle.knee\\nprint(f\"Best k (elbow): {best_k_elbow}\")\\nfinal_k = best_k_elbow if best_k_elbow else best_k_min\\n\\n# === Final model\\nmodel = NearestNeighbors(n_neighbors=final_k, metric=\\'euclidean\\')\\nmodel.fit(transformed_train)\\n\\n# === Query example\\ndistances, indices = model.kneighbors(transformed_test)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":178}]},{"cell_type":"code","source":["'''import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.model_selection import train_test_split\n","\n","# 1. Try dimensionality reduction first\n","scaler = StandardScaler()\n","scaled_features = scaler.fit_transform(train_data[feature_columns])\n","\n","pca = PCA(n_components=0.85)  # Keep 85% of variance\n","reduced_features = pca.fit_transform(scaled_features)\n","print(f\"Reduced from {len(feature_columns)} to {reduced_features.shape[1]} dimensions\")\n","print(f\"Explained variance per component: {pca.explained_variance_ratio_}\")\n","\n","# 2. Split data\n","train_inner, val_data = train_test_split(\n","    train_data, test_size=0.2, random_state=42)\n","\n","# 3. Transform the data (using PCA instead of Mahalanobis)\n","train_inner_scaled = scaler.transform(train_inner[feature_columns])\n","val_scaled = scaler.transform(val_data[feature_columns])\n","train_inner_reduced = pca.transform(train_inner_scaled)\n","val_reduced = pca.transform(val_scaled)\n","\n","# 4. Try cosine distance (based on your distance distributions)\n","k_values = list(range(1, 31))\n","validation_scores = []\n","\n","for k in k_values:\n","    model = NearestNeighbors(n_neighbors=k, metric='cosine')\n","    model.fit(train_inner_reduced)\n","\n","    # Get average distance to k neighbors\n","    distances, _ = model.kneighbors(val_reduced)\n","    avg_distance = np.mean(distances)\n","    validation_scores.append(avg_distance)\n","\n","# 5. Plot with a clear \"second derivative\" approach\n","plt.figure(figsize=(12, 6))\n","\n","# Plot 1: Distance curve\n","plt.subplot(1, 2, 1)\n","plt.plot(k_values, validation_scores, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Average Distance')\n","plt.title('k vs Average Distance')\n","\n","# Plot 2: Slope of the distance curve\n","plt.subplot(1, 2, 2)\n","slopes = np.gradient(validation_scores)\n","plt.plot(k_values, slopes, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Slope (First Derivative)')\n","plt.title('Rate of Change in Distance')\n","\n","plt.tight_layout()\n","plt.show()\n","\n","# 6. Find the elbow using rate of change in slope\n","second_derivative = np.gradient(slopes)\n","# Smooth the second derivative to reduce noise\n","from scipy.signal import savgol_filter\n","smooth_second_deriv = savgol_filter(second_derivative,\n","                                   window_length=5, # must be odd\n","                                   polyorder=2)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, smooth_second_deriv, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Second Derivative (smoothed)')\n","plt.title('Acceleration of Distance Change')\n","\n","# The point of maximum absolute second derivative is the elbow\n","best_k = k_values[np.argmax(np.abs(smooth_second_deriv))]\n","plt.axvline(x=best_k, color='r', linestyle='--',\n","           label=f'Optimal k = {best_k}')\n","plt.legend()\n","plt.show()\n","\n","print(f\"Selected optimal k: {best_k}\")\n","\n","# 7. Final model using the full training set\n","full_train_scaled = scaler.fit_transform(train_data[feature_columns])\n","full_train_reduced = pca.fit_transform(full_train_scaled)\n","test_scaled = scaler.transform(test_data[feature_columns])\n","test_reduced = pca.transform(test_scaled)\n","\n","final_model = NearestNeighbors(n_neighbors=best_k, metric='cosine')\n","final_model.fit(full_train_reduced)\n","distances, indices = final_model.kneighbors(test_reduced)'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"4dsztGUntzsL","executionInfo":{"status":"ok","timestamp":1746269166787,"user_tz":-180,"elapsed":9,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"e2fc8e94-b7b2-4c3d-d18e-cefd70011194"},"execution_count":180,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom sklearn.preprocessing import StandardScaler\\nfrom sklearn.decomposition import PCA\\nfrom sklearn.neighbors import NearestNeighbors\\nfrom sklearn.model_selection import train_test_split\\n\\n# 1. Try dimensionality reduction first\\nscaler = StandardScaler()\\nscaled_features = scaler.fit_transform(train_data[feature_columns])\\n\\npca = PCA(n_components=0.85)  # Keep 85% of variance\\nreduced_features = pca.fit_transform(scaled_features)\\nprint(f\"Reduced from {len(feature_columns)} to {reduced_features.shape[1]} dimensions\")\\nprint(f\"Explained variance per component: {pca.explained_variance_ratio_}\")\\n\\n# 2. Split data\\ntrain_inner, val_data = train_test_split(\\n    train_data, test_size=0.2, random_state=42)\\n\\n# 3. Transform the data (using PCA instead of Mahalanobis)\\ntrain_inner_scaled = scaler.transform(train_inner[feature_columns])\\nval_scaled = scaler.transform(val_data[feature_columns])\\ntrain_inner_reduced = pca.transform(train_inner_scaled)\\nval_reduced = pca.transform(val_scaled)\\n\\n# 4. Try cosine distance (based on your distance distributions)\\nk_values = list(range(1, 31))\\nvalidation_scores = []\\n\\nfor k in k_values:\\n    model = NearestNeighbors(n_neighbors=k, metric=\\'cosine\\')\\n    model.fit(train_inner_reduced)\\n    \\n    # Get average distance to k neighbors\\n    distances, _ = model.kneighbors(val_reduced)\\n    avg_distance = np.mean(distances)\\n    validation_scores.append(avg_distance)\\n\\n# 5. Plot with a clear \"second derivative\" approach\\nplt.figure(figsize=(12, 6))\\n\\n# Plot 1: Distance curve\\nplt.subplot(1, 2, 1)\\nplt.plot(k_values, validation_scores, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Average Distance\\')\\nplt.title(\\'k vs Average Distance\\')\\n\\n# Plot 2: Slope of the distance curve\\nplt.subplot(1, 2, 2)\\nslopes = np.gradient(validation_scores)\\nplt.plot(k_values, slopes, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Slope (First Derivative)\\')\\nplt.title(\\'Rate of Change in Distance\\')\\n\\nplt.tight_layout()\\nplt.show()\\n\\n# 6. Find the elbow using rate of change in slope\\nsecond_derivative = np.gradient(slopes)\\n# Smooth the second derivative to reduce noise\\nfrom scipy.signal import savgol_filter\\nsmooth_second_deriv = savgol_filter(second_derivative, \\n                                   window_length=5, # must be odd\\n                                   polyorder=2)\\n\\nplt.figure(figsize=(10, 6))\\nplt.plot(k_values, smooth_second_deriv, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Second Derivative (smoothed)\\')\\nplt.title(\\'Acceleration of Distance Change\\')\\n\\n# The point of maximum absolute second derivative is the elbow\\nbest_k = k_values[np.argmax(np.abs(smooth_second_deriv))]\\nplt.axvline(x=best_k, color=\\'r\\', linestyle=\\'--\\', \\n           label=f\\'Optimal k = {best_k}\\')\\nplt.legend()\\nplt.show()\\n\\nprint(f\"Selected optimal k: {best_k}\")\\n\\n# 7. Final model using the full training set\\nfull_train_scaled = scaler.fit_transform(train_data[feature_columns])\\nfull_train_reduced = pca.fit_transform(full_train_scaled)\\ntest_scaled = scaler.transform(test_data[feature_columns])\\ntest_reduced = pca.transform(test_scaled)\\n\\nfinal_model = NearestNeighbors(n_neighbors=best_k, metric=\\'cosine\\')\\nfinal_model.fit(full_train_reduced)\\ndistances, indices = final_model.kneighbors(test_reduced)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":180}]},{"cell_type":"code","source":["'''import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.model_selection import train_test_split\n","from scipy.signal import savgol_filter\n","import time\n","\n","print(\"=\"*80)\n","print(\"BEGINNING ANALYSIS\")\n","print(\"=\"*80)\n","\n","# 1. Try dimensionality reduction first\n","print(\"\\n[STEP 1] Starting dimensionality reduction...\")\n","start_time = time.time()\n","\n","scaler = StandardScaler()\n","scaled_features = scaler.fit_transform(train_data[feature_columns])\n","print(f\"Original data shape: {train_data[feature_columns].shape}\")\n","print(f\"Feature means before scaling: {np.mean(train_data[feature_columns], axis=0)[:3]}... (first 3 shown)\")\n","print(f\"Feature std before scaling: {np.std(train_data[feature_columns], axis=0)[:3]}... (first 3 shown)\")\n","print(f\"Feature means after scaling: {np.mean(scaled_features, axis=0)[:3]}... (first 3 shown)\")\n","print(f\"Feature std after scaling: {np.std(scaled_features, axis=0)[:3]}... (first 3 shown)\")\n","\n","pca = PCA(n_components=0.85)  # Keep 85% of variance\n","reduced_features = pca.fit_transform(scaled_features)\n","print(f\"Reduced from {len(feature_columns)} to {reduced_features.shape[1]} dimensions\")\n","print(f\"Explained variance by component: {pca.explained_variance_ratio_}\")\n","print(f\"Cumulative explained variance: {np.cumsum(pca.explained_variance_ratio_)}\")\n","print(f\"PCA complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 2. Split data\n","print(\"\\n[STEP 2] Splitting data into train and validation sets...\")\n","start_time = time.time()\n","\n","train_inner, val_data = train_test_split(\n","    train_data, test_size=0.2, random_state=42)\n","\n","print(f\"Training set size: {len(train_inner)}\")\n","print(f\"Validation set size: {len(val_data)}\")\n","print(f\"Data split complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 3. Transform the data (using PCA instead of Mahalanobis)\n","print(\"\\n[STEP 3] Transforming data with PCA...\")\n","start_time = time.time()\n","\n","train_inner_scaled = scaler.transform(train_inner[feature_columns])\n","val_scaled = scaler.transform(val_data[feature_columns])\n","train_inner_reduced = pca.transform(train_inner_scaled)\n","val_reduced = pca.transform(val_scaled)\n","\n","print(f\"Original training set shape: {train_inner[feature_columns].shape}\")\n","print(f\"Reduced training set shape: {train_inner_reduced.shape}\")\n","print(f\"Original validation set shape: {val_data[feature_columns].shape}\")\n","print(f\"Reduced validation set shape: {val_reduced.shape}\")\n","print(f\"Data transformation complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 4. Try cosine distance (based on your distance distributions)\n","print(\"\\n[STEP 4] Testing different k values...\")\n","start_time = time.time()\n","\n","k_values = list(range(1, 31))\n","validation_scores = []\n","\n","for k in k_values:\n","    model = NearestNeighbors(n_neighbors=k, metric='cosine')\n","    model.fit(train_inner_reduced)\n","\n","    # Get average distance to k neighbors\n","    distances, _ = model.kneighbors(val_reduced)\n","    avg_distance = np.mean(distances)\n","    validation_scores.append(avg_distance)\n","\n","    if k % 5 == 0 or k == 1:\n","        print(f\"  k={k}: Average distance = {avg_distance:.6f}\")\n","\n","print(f\"k value testing complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 5. Plot with a clear \"second derivative\" approach\n","print(\"\\n[STEP 5] Creating visualization plots...\")\n","start_time = time.time()\n","\n","plt.figure(figsize=(15, 5))\n","\n","# Plot 1: Distance curve\n","plt.subplot(1, 3, 1)\n","plt.plot(k_values, validation_scores, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Average Distance')\n","plt.title('k vs Average Distance')\n","\n","# Plot 2: Slope of the distance curve (first derivative)\n","slopes = np.gradient(validation_scores)\n","plt.subplot(1, 3, 2)\n","plt.plot(k_values, slopes, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Slope (First Derivative)')\n","plt.title('Rate of Change in Distance')\n","\n","# Plot 3: Second derivative\n","second_derivative = np.gradient(slopes)\n","plt.subplot(1, 3, 3)\n","plt.plot(k_values, second_derivative, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Second Derivative')\n","plt.title('Acceleration of Distance Change')\n","\n","plt.tight_layout()\n","plt.show()\n","\n","print(\"Basic plots created.\")\n","\n","# 6. Find the elbow using rate of change in slope\n","print(\"\\n[STEP 6] Detecting optimal k value...\")\n","start_time = time.time()\n","\n","# Smooth the second derivative to reduce noise\n","window_length = min(5, len(k_values) - 2)  # Must be odd and less than data length\n","if window_length % 2 == 0:\n","    window_length -= 1  # Ensure it's odd\n","\n","if window_length >= 3:\n","    smooth_second_deriv = savgol_filter(second_derivative,\n","                                     window_length=window_length,\n","                                     polyorder=min(2, window_length-1))\n","    print(f\"Applied Savitzky-Golay filter with window={window_length}\")\n","else:\n","    smooth_second_deriv = second_derivative\n","    print(\"Warning: Not enough data points for smoothing filter\")\n","\n","# Print raw values for inspection\n","print(\"\\nRaw values for analysis:\")\n","print(f\"{'k':<5} {'Distance':<12} {'1st Deriv':<12} {'2nd Deriv':<12} {'Smoothed 2nd':<12}\")\n","print(\"-\" * 55)\n","for i, k in enumerate(k_values):\n","    print(f\"{k:<5} {validation_scores[i]:<12.6f} {slopes[i]:<12.6f} {second_derivative[i]:<12.6f} {smooth_second_deriv[i]:<12.6f}\")\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, smooth_second_deriv, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Second Derivative (smoothed)')\n","plt.title('Acceleration of Distance Change')\n","\n","# Find potential elbow points\n","abs_second_deriv = np.abs(smooth_second_deriv)\n","# The point of maximum absolute second derivative is the elbow (big change in slope)\n","best_k_max = k_values[np.argmax(abs_second_deriv)]\n","\n","# Alternative: First peak in second derivative after k=3\n","peak_indices = []\n","for i in range(3, len(k_values)-1):\n","    if (smooth_second_deriv[i] > smooth_second_deriv[i-1] and\n","        smooth_second_deriv[i] > smooth_second_deriv[i+1]):\n","        peak_indices.append(i)\n","\n","if peak_indices:\n","    best_k_peak = k_values[peak_indices[0]]\n","    plt.axvline(x=best_k_peak, color='g', linestyle='--',\n","               label=f'First Peak k = {best_k_peak}')\n","\n","plt.axvline(x=best_k_max, color='r', linestyle='--',\n","           label=f'Max 2nd Deriv k = {best_k_max}')\n","plt.legend()\n","plt.show()\n","\n","# For comparison, show traditional elbow method\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, validation_scores, 'o-')\n","plt.grid(True)\n","plt.xlabel('k')\n","plt.ylabel('Average Distance')\n","plt.title('Traditional Elbow Method')\n","\n","# Use the determined best k\n","best_k = best_k_max\n","plt.axvline(x=best_k, color='r', linestyle='--',\n","           label=f'Selected k = {best_k}')\n","if 'best_k_peak' in locals():\n","    plt.axvline(x=best_k_peak, color='g', linestyle='--',\n","               label=f'Alternative k = {best_k_peak}')\n","plt.legend()\n","plt.show()\n","\n","print(f\"Selected optimal k: {best_k}\")\n","if 'best_k_peak' in locals():\n","    print(f\"Alternative k based on first peak: {best_k_peak}\")\n","print(f\"Optimal k detection complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 7. Final model using the full training set\n","print(\"\\n[STEP 7] Training final model with k = {best_k}...\")\n","start_time = time.time()\n","\n","full_train_scaled = scaler.fit_transform(train_data[feature_columns])\n","full_train_reduced = pca.fit_transform(full_train_scaled)\n","test_scaled = scaler.transform(test_data[feature_columns])\n","test_reduced = pca.transform(test_scaled)\n","\n","print(f\"Full training set shape after reduction: {full_train_reduced.shape}\")\n","print(f\"Test set shape after reduction: {test_reduced.shape}\")\n","\n","final_model = NearestNeighbors(n_neighbors=best_k, metric='cosine')\n","final_model.fit(full_train_reduced)\n","distances, indices = final_model.kneighbors(test_reduced)\n","\n","print(f\"Distance statistics for test set:\")\n","print(f\"  Min distance: {np.min(distances):.6f}\")\n","print(f\"  Max distance: {np.max(distances):.6f}\")\n","print(f\"  Mean distance: {np.mean(distances):.6f}\")\n","print(f\"  Std deviation: {np.std(distances):.6f}\")\n","\n","print(f\"Final model training complete. Time taken: {time.time() - start_time:.2f} seconds\")\n","\n","# 8. Try to interpret what this means\n","print(\"\\n[STEP 8] Interpreting results...\")\n","\n","# Calculate silhouette score if we have class labels (assuming 'target' column exists)\n","try:\n","    from sklearn.metrics import silhouette_score\n","    # Convert distances to a similarity measure for each test point\n","    similarity_matrix = 1 / (1 + distances)  # Simple transformation to similarity\n","    nearest_labels = np.array([train_data.iloc[indices[i]]['target'].mode()[0] for i in range(len(test_data))])\n","\n","    if 'target' in test_data.columns:\n","        # Calculate how often the predicted label matches the true label\n","        accuracy = np.mean(nearest_labels == test_data['target'])\n","        print(f\"Nearest neighbor classification accuracy: {accuracy:.4f}\")\n","\n","        # Silhouette score if we have >1 class\n","        if len(np.unique(test_data['target'])) > 1:\n","            silhouette = silhouette_score(test_reduced, test_data['target'])\n","            print(f\"Silhouette score: {silhouette:.4f}\")\n","except Exception as e:\n","    print(f\"Could not compute classification metrics: {str(e)}\")\n","\n","print(\"\\n[ANALYSIS COMPLETE]\")\n","print(f\"Selected k = {best_k} using {'cosine'} distance on {full_train_reduced.shape[1]}-dimensional PCA data\")\n","print(\"=\"*80)'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"J9ft0h-UucyU","executionInfo":{"status":"ok","timestamp":1746269167416,"user_tz":-180,"elapsed":8,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"182075c2-026d-49f4-852d-34128ac80a56"},"execution_count":181,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom sklearn.preprocessing import StandardScaler\\nfrom sklearn.decomposition import PCA\\nfrom sklearn.neighbors import NearestNeighbors\\nfrom sklearn.model_selection import train_test_split\\nfrom scipy.signal import savgol_filter\\nimport time\\n\\nprint(\"=\"*80)\\nprint(\"BEGINNING ANALYSIS\")\\nprint(\"=\"*80)\\n\\n# 1. Try dimensionality reduction first\\nprint(\"\\n[STEP 1] Starting dimensionality reduction...\")\\nstart_time = time.time()\\n\\nscaler = StandardScaler()\\nscaled_features = scaler.fit_transform(train_data[feature_columns])\\nprint(f\"Original data shape: {train_data[feature_columns].shape}\")\\nprint(f\"Feature means before scaling: {np.mean(train_data[feature_columns], axis=0)[:3]}... (first 3 shown)\")\\nprint(f\"Feature std before scaling: {np.std(train_data[feature_columns], axis=0)[:3]}... (first 3 shown)\")\\nprint(f\"Feature means after scaling: {np.mean(scaled_features, axis=0)[:3]}... (first 3 shown)\")\\nprint(f\"Feature std after scaling: {np.std(scaled_features, axis=0)[:3]}... (first 3 shown)\")\\n\\npca = PCA(n_components=0.85)  # Keep 85% of variance\\nreduced_features = pca.fit_transform(scaled_features)\\nprint(f\"Reduced from {len(feature_columns)} to {reduced_features.shape[1]} dimensions\")\\nprint(f\"Explained variance by component: {pca.explained_variance_ratio_}\")\\nprint(f\"Cumulative explained variance: {np.cumsum(pca.explained_variance_ratio_)}\")\\nprint(f\"PCA complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 2. Split data\\nprint(\"\\n[STEP 2] Splitting data into train and validation sets...\")\\nstart_time = time.time()\\n\\ntrain_inner, val_data = train_test_split(\\n    train_data, test_size=0.2, random_state=42)\\n\\nprint(f\"Training set size: {len(train_inner)}\")\\nprint(f\"Validation set size: {len(val_data)}\")\\nprint(f\"Data split complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 3. Transform the data (using PCA instead of Mahalanobis)\\nprint(\"\\n[STEP 3] Transforming data with PCA...\")\\nstart_time = time.time()\\n\\ntrain_inner_scaled = scaler.transform(train_inner[feature_columns])\\nval_scaled = scaler.transform(val_data[feature_columns])\\ntrain_inner_reduced = pca.transform(train_inner_scaled)\\nval_reduced = pca.transform(val_scaled)\\n\\nprint(f\"Original training set shape: {train_inner[feature_columns].shape}\")\\nprint(f\"Reduced training set shape: {train_inner_reduced.shape}\")\\nprint(f\"Original validation set shape: {val_data[feature_columns].shape}\")\\nprint(f\"Reduced validation set shape: {val_reduced.shape}\")\\nprint(f\"Data transformation complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 4. Try cosine distance (based on your distance distributions)\\nprint(\"\\n[STEP 4] Testing different k values...\")\\nstart_time = time.time()\\n\\nk_values = list(range(1, 31))\\nvalidation_scores = []\\n\\nfor k in k_values:\\n    model = NearestNeighbors(n_neighbors=k, metric=\\'cosine\\')\\n    model.fit(train_inner_reduced)\\n    \\n    # Get average distance to k neighbors\\n    distances, _ = model.kneighbors(val_reduced)\\n    avg_distance = np.mean(distances)\\n    validation_scores.append(avg_distance)\\n    \\n    if k % 5 == 0 or k == 1:\\n        print(f\"  k={k}: Average distance = {avg_distance:.6f}\")\\n\\nprint(f\"k value testing complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 5. Plot with a clear \"second derivative\" approach\\nprint(\"\\n[STEP 5] Creating visualization plots...\")\\nstart_time = time.time()\\n\\nplt.figure(figsize=(15, 5))\\n\\n# Plot 1: Distance curve\\nplt.subplot(1, 3, 1)\\nplt.plot(k_values, validation_scores, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Average Distance\\')\\nplt.title(\\'k vs Average Distance\\')\\n\\n# Plot 2: Slope of the distance curve (first derivative)\\nslopes = np.gradient(validation_scores)\\nplt.subplot(1, 3, 2)\\nplt.plot(k_values, slopes, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Slope (First Derivative)\\')\\nplt.title(\\'Rate of Change in Distance\\')\\n\\n# Plot 3: Second derivative\\nsecond_derivative = np.gradient(slopes)\\nplt.subplot(1, 3, 3)\\nplt.plot(k_values, second_derivative, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Second Derivative\\')\\nplt.title(\\'Acceleration of Distance Change\\')\\n\\nplt.tight_layout()\\nplt.show()\\n\\nprint(\"Basic plots created.\")\\n\\n# 6. Find the elbow using rate of change in slope\\nprint(\"\\n[STEP 6] Detecting optimal k value...\")\\nstart_time = time.time()\\n\\n# Smooth the second derivative to reduce noise\\nwindow_length = min(5, len(k_values) - 2)  # Must be odd and less than data length\\nif window_length % 2 == 0:\\n    window_length -= 1  # Ensure it\\'s odd\\n\\nif window_length >= 3:\\n    smooth_second_deriv = savgol_filter(second_derivative, \\n                                     window_length=window_length, \\n                                     polyorder=min(2, window_length-1))\\n    print(f\"Applied Savitzky-Golay filter with window={window_length}\")\\nelse:\\n    smooth_second_deriv = second_derivative\\n    print(\"Warning: Not enough data points for smoothing filter\")\\n\\n# Print raw values for inspection\\nprint(\"\\nRaw values for analysis:\")\\nprint(f\"{\\'k\\':<5} {\\'Distance\\':<12} {\\'1st Deriv\\':<12} {\\'2nd Deriv\\':<12} {\\'Smoothed 2nd\\':<12}\")\\nprint(\"-\" * 55)\\nfor i, k in enumerate(k_values):\\n    print(f\"{k:<5} {validation_scores[i]:<12.6f} {slopes[i]:<12.6f} {second_derivative[i]:<12.6f} {smooth_second_deriv[i]:<12.6f}\")\\n\\nplt.figure(figsize=(10, 6))\\nplt.plot(k_values, smooth_second_deriv, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Second Derivative (smoothed)\\')\\nplt.title(\\'Acceleration of Distance Change\\')\\n\\n# Find potential elbow points\\nabs_second_deriv = np.abs(smooth_second_deriv)\\n# The point of maximum absolute second derivative is the elbow (big change in slope)\\nbest_k_max = k_values[np.argmax(abs_second_deriv)]\\n\\n# Alternative: First peak in second derivative after k=3\\npeak_indices = []\\nfor i in range(3, len(k_values)-1):\\n    if (smooth_second_deriv[i] > smooth_second_deriv[i-1] and \\n        smooth_second_deriv[i] > smooth_second_deriv[i+1]):\\n        peak_indices.append(i)\\n\\nif peak_indices:\\n    best_k_peak = k_values[peak_indices[0]]\\n    plt.axvline(x=best_k_peak, color=\\'g\\', linestyle=\\'--\\', \\n               label=f\\'First Peak k = {best_k_peak}\\')\\n\\nplt.axvline(x=best_k_max, color=\\'r\\', linestyle=\\'--\\', \\n           label=f\\'Max 2nd Deriv k = {best_k_max}\\')\\nplt.legend()\\nplt.show()\\n\\n# For comparison, show traditional elbow method\\nplt.figure(figsize=(10, 6))\\nplt.plot(k_values, validation_scores, \\'o-\\')\\nplt.grid(True)\\nplt.xlabel(\\'k\\')\\nplt.ylabel(\\'Average Distance\\')\\nplt.title(\\'Traditional Elbow Method\\')\\n\\n# Use the determined best k\\nbest_k = best_k_max\\nplt.axvline(x=best_k, color=\\'r\\', linestyle=\\'--\\', \\n           label=f\\'Selected k = {best_k}\\')\\nif \\'best_k_peak\\' in locals():\\n    plt.axvline(x=best_k_peak, color=\\'g\\', linestyle=\\'--\\', \\n               label=f\\'Alternative k = {best_k_peak}\\')\\nplt.legend()\\nplt.show()\\n\\nprint(f\"Selected optimal k: {best_k}\")\\nif \\'best_k_peak\\' in locals():\\n    print(f\"Alternative k based on first peak: {best_k_peak}\")\\nprint(f\"Optimal k detection complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 7. Final model using the full training set\\nprint(\"\\n[STEP 7] Training final model with k = {best_k}...\")\\nstart_time = time.time()\\n\\nfull_train_scaled = scaler.fit_transform(train_data[feature_columns])\\nfull_train_reduced = pca.fit_transform(full_train_scaled)\\ntest_scaled = scaler.transform(test_data[feature_columns])\\ntest_reduced = pca.transform(test_scaled)\\n\\nprint(f\"Full training set shape after reduction: {full_train_reduced.shape}\")\\nprint(f\"Test set shape after reduction: {test_reduced.shape}\")\\n\\nfinal_model = NearestNeighbors(n_neighbors=best_k, metric=\\'cosine\\')\\nfinal_model.fit(full_train_reduced)\\ndistances, indices = final_model.kneighbors(test_reduced)\\n\\nprint(f\"Distance statistics for test set:\")\\nprint(f\"  Min distance: {np.min(distances):.6f}\")\\nprint(f\"  Max distance: {np.max(distances):.6f}\")\\nprint(f\"  Mean distance: {np.mean(distances):.6f}\")\\nprint(f\"  Std deviation: {np.std(distances):.6f}\")\\n\\nprint(f\"Final model training complete. Time taken: {time.time() - start_time:.2f} seconds\")\\n\\n# 8. Try to interpret what this means\\nprint(\"\\n[STEP 8] Interpreting results...\")\\n\\n# Calculate silhouette score if we have class labels (assuming \\'target\\' column exists)\\ntry:\\n    from sklearn.metrics import silhouette_score\\n    # Convert distances to a similarity measure for each test point\\n    similarity_matrix = 1 / (1 + distances)  # Simple transformation to similarity\\n    nearest_labels = np.array([train_data.iloc[indices[i]][\\'target\\'].mode()[0] for i in range(len(test_data))])\\n    \\n    if \\'target\\' in test_data.columns:\\n        # Calculate how often the predicted label matches the true label\\n        accuracy = np.mean(nearest_labels == test_data[\\'target\\'])\\n        print(f\"Nearest neighbor classification accuracy: {accuracy:.4f}\")\\n        \\n        # Silhouette score if we have >1 class\\n        if len(np.unique(test_data[\\'target\\'])) > 1:\\n            silhouette = silhouette_score(test_reduced, test_data[\\'target\\'])\\n            print(f\"Silhouette score: {silhouette:.4f}\")\\nexcept Exception as e:\\n    print(f\"Could not compute classification metrics: {str(e)}\")\\n\\nprint(\"\\n[ANALYSIS COMPLETE]\")\\nprint(f\"Selected k = {best_k} using {\\'cosine\\'} distance on {full_train_reduced.shape[1]}-dimensional PCA data\")\\nprint(\"=\"*80)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":181}]},{"cell_type":"code","source":["'''import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.neighbors import NearestNeighbors\n","import seaborn as sns\n","\n","# 1. Check feature correlations\n","plt.figure(figsize=(12, 10))\n","correlation = train_data[feature_columns].corr()\n","sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f')\n","plt.title('Feature Correlation Matrix')\n","plt.tight_layout()\n","plt.show()\n","\n","# 2. Check covariance matrix conditioning\n","scaler = StandardScaler()\n","scaled_features = scaler.fit_transform(train_data[feature_columns])\n","cov_matrix = np.cov(scaled_features, rowvar=False)\n","eigenvalues = np.linalg.eigvals(cov_matrix)\n","condition_number = np.max(eigenvalues) / np.min(eigenvalues)\n","print(f\"Condition number of covariance matrix: {condition_number:.2e}\")\n","print(f\"Eigenvalues range: {np.min(eigenvalues):.2e} to {np.max(eigenvalues):.2e}\")\n","\n","# 3. Visualize data in reduced dimensions\n","pca = PCA(n_components=2)\n","pca_result = pca.fit_transform(scaled_features)\n","plt.figure(figsize=(10, 8))\n","plt.scatter(pca_result[:, 0], pca_result[:, 1], alpha=0.5)\n","plt.title('PCA Visualization of Data')\n","plt.xlabel('Principal Component 1')\n","plt.ylabel('Principal Component 2')\n","plt.show()\n","print(f\"Explained variance ratio: {pca.explained_variance_ratio_}\")\n","\n","# 4. Compare different distance metrics\n","metrics = ['euclidean', 'manhattan', 'cosine']\n","k = 5  # Fixed k for comparison\n","\n","plt.figure(figsize=(12, 8))\n","for i, metric in enumerate(metrics):\n","    nbrs = NearestNeighbors(n_neighbors=k+1, metric=metric)\n","    nbrs.fit(scaled_features)\n","    distances, _ = nbrs.kneighbors(scaled_features)\n","    # Skip the first neighbor (self)\n","    avg_distances = np.mean(distances[:, 1:], axis=1)\n","\n","    plt.subplot(1, 3, i+1)\n","    plt.hist(avg_distances, bins=30)\n","    plt.title(f'{metric.capitalize()} Distance Distribution')\n","    plt.xlabel('Average Distance to k Neighbors')\n","    plt.ylabel('Count')\n","\n","plt.tight_layout()\n","plt.show()\n","\n","# 5. Try standard Mahalanobis distance from sklearn\n","from sklearn.metrics import DistanceMetric\n","dist = DistanceMetric.get_metric('mahalanobis', V=np.linalg.inv(cov_matrix))\n","mahalanobis_distances = dist.pairwise(scaled_features)\n","plt.figure(figsize=(10, 6))\n","plt.hist(mahalanobis_distances.flatten(), bins=50)\n","plt.title('Distribution of Mahalanobis Distances')\n","plt.xlabel('Distance')\n","plt.ylabel('Count')\n","plt.show()'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"yJ1rV6dFs8S-","executionInfo":{"status":"ok","timestamp":1746269168007,"user_tz":-180,"elapsed":10,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"14311ad3-7960-4e44-9a64-0d4429954632"},"execution_count":182,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom sklearn.preprocessing import StandardScaler\\nfrom sklearn.decomposition import PCA\\nfrom sklearn.neighbors import NearestNeighbors\\nimport seaborn as sns\\n\\n# 1. Check feature correlations\\nplt.figure(figsize=(12, 10))\\ncorrelation = train_data[feature_columns].corr()\\nsns.heatmap(correlation, annot=True, cmap=\\'coolwarm\\', fmt=\\'.2f\\')\\nplt.title(\\'Feature Correlation Matrix\\')\\nplt.tight_layout()\\nplt.show()\\n\\n# 2. Check covariance matrix conditioning\\nscaler = StandardScaler()\\nscaled_features = scaler.fit_transform(train_data[feature_columns])\\ncov_matrix = np.cov(scaled_features, rowvar=False)\\neigenvalues = np.linalg.eigvals(cov_matrix)\\ncondition_number = np.max(eigenvalues) / np.min(eigenvalues)\\nprint(f\"Condition number of covariance matrix: {condition_number:.2e}\")\\nprint(f\"Eigenvalues range: {np.min(eigenvalues):.2e} to {np.max(eigenvalues):.2e}\")\\n\\n# 3. Visualize data in reduced dimensions\\npca = PCA(n_components=2)\\npca_result = pca.fit_transform(scaled_features)\\nplt.figure(figsize=(10, 8))\\nplt.scatter(pca_result[:, 0], pca_result[:, 1], alpha=0.5)\\nplt.title(\\'PCA Visualization of Data\\')\\nplt.xlabel(\\'Principal Component 1\\')\\nplt.ylabel(\\'Principal Component 2\\')\\nplt.show()\\nprint(f\"Explained variance ratio: {pca.explained_variance_ratio_}\")\\n\\n# 4. Compare different distance metrics\\nmetrics = [\\'euclidean\\', \\'manhattan\\', \\'cosine\\']\\nk = 5  # Fixed k for comparison\\n\\nplt.figure(figsize=(12, 8))\\nfor i, metric in enumerate(metrics):\\n    nbrs = NearestNeighbors(n_neighbors=k+1, metric=metric)\\n    nbrs.fit(scaled_features)\\n    distances, _ = nbrs.kneighbors(scaled_features)\\n    # Skip the first neighbor (self)\\n    avg_distances = np.mean(distances[:, 1:], axis=1)\\n    \\n    plt.subplot(1, 3, i+1)\\n    plt.hist(avg_distances, bins=30)\\n    plt.title(f\\'{metric.capitalize()} Distance Distribution\\')\\n    plt.xlabel(\\'Average Distance to k Neighbors\\')\\n    plt.ylabel(\\'Count\\')\\n\\nplt.tight_layout()\\nplt.show()\\n\\n# 5. Try standard Mahalanobis distance from sklearn\\nfrom sklearn.metrics import DistanceMetric\\ndist = DistanceMetric.get_metric(\\'mahalanobis\\', V=np.linalg.inv(cov_matrix))\\nmahalanobis_distances = dist.pairwise(scaled_features)\\nplt.figure(figsize=(10, 6))\\nplt.hist(mahalanobis_distances.flatten(), bins=50)\\nplt.title(\\'Distribution of Mahalanobis Distances\\')\\nplt.xlabel(\\'Distance\\')\\nplt.ylabel(\\'Count\\')\\nplt.show()'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":182}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from tqdm import tqdm\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.model_selection import train_test_split\n","\n","# Assuming feature_columns are already defined\n","feature_columns = ['tempo','loudness','energy','danceability','positiveness','speechiness',\n","                  'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","\n","# Split data for validation\n","train_inner, val_data = train_test_split(train_data, test_size=0.2, random_state=42)\n","\n","# Scaling\n","scaler = StandardScaler()\n","scaled_inner = scaler.fit_transform(train_inner[feature_columns])\n","scaled_val = scaler.transform(val_data[feature_columns])\n","\n","# Mahalanobis pre-transform\n","cov_matrix = np.cov(scaled_inner, rowvar=False)\n","try:\n","    inv_cov_matrix = np.linalg.inv(cov_matrix)\n","    from scipy.linalg import sqrtm\n","    L = sqrtm(inv_cov_matrix)\n","    if np.iscomplexobj(L):\n","        L = L.real\n","\n","    transformed_inner = scaled_inner @ L.T\n","    transformed_val = scaled_val @ L.T\n","except np.linalg.LinAlgError:\n","    print(\"Warning: Covariance matrix is singular. Using regularization.\")\n","    cov_matrix += np.eye(cov_matrix.shape[0]) * 1e-6\n","    inv_cov_matrix = np.linalg.inv(cov_matrix)\n","    from scipy.linalg import sqrtm\n","    L = sqrtm(inv_cov_matrix)\n","    if np.iscomplexobj(L):\n","        L = L.real\n","\n","    transformed_inner = scaled_inner @ L.T\n","    transformed_val = scaled_val @ L.T\n","\n","# k-NN evaluation with a balanced approach\n","k_values = list(range(1, 31))\n","distortion_scores = []\n","\n","for k in tqdm(k_values, desc=\"Evaluating k values\"):\n","    # Fit on the training set\n","    nbrs = NearestNeighbors(n_neighbors=k, metric='euclidean')\n","    nbrs.fit(transformed_inner)\n","\n","    # Compute distances for validation set\n","    distances, _ = nbrs.kneighbors(transformed_val)\n","\n","    # Calculate \"distortion\" - balance between underfitting and overfitting\n","    # For lower k values, we add a regularization term that penalizes small k\n","    avg_distance = np.mean(distances)\n","    regularization = 1/(k**0.5)  # Penalty factor that decreases as k increases\n","    distortion = avg_distance + regularization\n","    distortion_scores.append(distortion)\n","\n","# Plot with clear indication of the minimum\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, distortion_scores, marker='o')\n","plt.axvline(x=k_values[np.argmin(distortion_scores)], color='r', linestyle='--',\n","            label=f'Best k = {k_values[np.argmin(distortion_scores)]}')\n","plt.xlabel('k')\n","plt.ylabel('Distortion Score (Distance + Regularization)')\n","plt.title('k-NN Parameter Selection with Regularization')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","\n","# Get the best k\n","best_k = k_values[np.argmin(distortion_scores)]\n","print(f\"Best k value: {best_k}\")\n","\n","# Train final model with best k\n","nbrs_final = NearestNeighbors(n_neighbors=best_k, metric='euclidean')\n","# Use all training data for final model\n","scaled_features = scaler.fit_transform(train_data[feature_columns])\n","cov_matrix = np.cov(scaled_features, rowvar=False)\n","try:\n","    inv_cov_matrix = np.linalg.inv(cov_matrix)\n","except np.linalg.LinAlgError:\n","    cov_matrix += np.eye(cov_matrix.shape[0]) * 1e-6\n","    inv_cov_matrix = np.linalg.inv(cov_matrix)\n","\n","L = sqrtm(inv_cov_matrix)\n","if np.iscomplexobj(L):\n","    L = L.real\n","transformed_train = scaled_features @ L.T\n","nbrs_final.fit(transformed_train)\n","\n","# Test data\n","scaled_test = scaler.transform(test_data[feature_columns])\n","transformed_test = scaled_test @ L.T\n","distances, indices = nbrs_final.kneighbors(transformed_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"LUICij8Pqnl7","executionInfo":{"status":"ok","timestamp":1746269166334,"user_tz":-180,"elapsed":11186,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"25deab14-abfd-4d87-bdbf-ce17ba743afd"},"execution_count":179,"outputs":[{"output_type":"stream","name":"stderr","text":["Evaluating k values: 100%|██████████| 30/30 [00:09<00:00,  3.14it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Best k value: 6\n"]}]},{"cell_type":"markdown","source":["# Artists Handelling"],"metadata":{"id":"peAU6SN5kI8j"}},{"cell_type":"code","source":["#!pip install transformers\n","#!pip install torch\n","#!pip install gensim\n","#!pip install requests"],"metadata":{"id":"D5ZDdL6N0Wj_","executionInfo":{"status":"ok","timestamp":1746269214497,"user_tz":-180,"elapsed":2,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":188,"outputs":[]},{"cell_type":"code","source":["import requests\n","from collections import Counter\n","import json\n","\n","def get_artist_id(artist_name):\n","    url = f\"https://api.deezer.com/search/artist?q={artist_name}\"\n","    response = requests.get(url)\n","    data = response.json()\n","    if data['data']:\n","        return data['data'][0]['id']\n","    return None\n","\n","def get_similar_artists(artist_id):\n","    url = f\"https://api.deezer.com/artist/{artist_id}/related\"\n","    response = requests.get(url)\n","    data = response.json()\n","    return [artist['name'] for artist in data['data']]\n","\n","def recommend_artists(favorite_artists, save_to_file=False):\n","    all_similar = []\n","\n","    for name in favorite_artists:\n","        artist_id = get_artist_id(name)\n","        if artist_id:\n","            print(f\"Found artist: {name} — fetching similar artists...\")\n","            similar = get_similar_artists(artist_id)\n","            all_similar.extend(similar)\n","        else:\n","            print(f\"Could not find artist: {name}\")\n","\n","    recommended = Counter(all_similar)\n","\n","    # Filter out any artists already in favorites\n","    recommended = {\n","        artist: count for artist, count in recommended.items()\n","        if artist not in favorite_artists\n","    }\n","\n","    if save_to_file:\n","        with open(\"recommended_artists.json\", \"w\") as f:\n","            json.dump(recommended, f, indent=2)\n","\n","    return recommended\n","\n","# === Example Usage ===\n","'''favorite_artists = [\n","    \"The Beatles\",\n","    \"Coldplay\",\n","    \"Arctic Monkeys\",\n","    \"Elton John\",\n","    \"Polo & Pan\"\n","]'''\n","\n","\n","#print(\"\\nTop recommended artists with scores:\")\n","#for artist, score in sorted(recommendations.items(), key=lambda x: x[1], reverse=True):\n","#    print(f\"- {artist}: {score}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"ghtkRb5d1heB","executionInfo":{"status":"ok","timestamp":1746269214861,"user_tz":-180,"elapsed":12,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"2be85ea6-f74e-4d3d-d90b-0e3220bc09ac"},"execution_count":189,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'favorite_artists = [\\n    \"The Beatles\",\\n    \"Coldplay\",\\n    \"Arctic Monkeys\",\\n    \"Elton John\",\\n    \"Polo & Pan\"\\n]'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":189}]},{"cell_type":"code","source":["from collections import deque\n","\n","def expand_artist_dict_with_degree(base_artists, max_degree=2, max_related_per_artist=3):\n","    expanded = dict(base_artists)  # original dict: {artist_name: score}\n","    visited = set(base_artists.keys())\n","    queue = deque([(artist, 1) for artist in base_artists.keys()])  # (artist, current_degree)\n","\n","    while queue:\n","        current_artist, degree = queue.popleft()\n","\n","        if degree > max_degree:\n","            continue\n","\n","        artist_id = get_artist_id(current_artist)\n","        if not artist_id:\n","            continue\n","\n","        related_artists = get_similar_artists(artist_id)[:max_related_per_artist]\n","\n","        for related in related_artists:\n","            if related not in visited:\n","                visited.add(related)\n","                score = max(1, base_artists.get(current_artist, 1) - degree + 1)\n","                expanded[related] = score\n","                queue.append((related, degree + 1))\n","\n","    return expanded"],"metadata":{"id":"yWjhuwtD-ITw","executionInfo":{"status":"ok","timestamp":1746269215311,"user_tz":-180,"elapsed":4,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":190,"outputs":[]},{"cell_type":"markdown","source":["# Recomendation"],"metadata":{"id":"E4gw7bHbkTZD"}},{"cell_type":"code","source":["'''def iterative_recommendation(artist_name, song_name, base_artist_dict,\n","                             dataset='all', num_recommendations=5,\n","                             min_score_threshold=0.7, max_degree_limit=3):\n","\n","    current_artist_dict = dict(base_artist_dict)\n","    degree = 1\n","    recommendations = None\n","\n","    while degree <= max_degree_limit:\n","        print(f\"Trying with degree {degree}, {len(current_artist_dict)} artists...\")\n","\n","        recommendations = recommend_from_favorite_artists(\n","            artist_name, song_name, current_artist_dict,\n","            dataset=dataset, num_recommendations=num_recommendations\n","        )\n","\n","        if recommendations is None or recommendations.empty:\n","            print(\"No recommendations found.\")\n","            return None\n","\n","        max_score = recommendations['score'].max()\n","        print(f\"Max similarity score: {max_score:.3f}\")\n","\n","        if max_score >= min_score_threshold:\n","            print(f\"Acceptable recommendation found with score {max_score:.3f}.\")\n","            return recommendations\n","\n","        # Expand artist dict if similarity too low\n","        current_artist_dict = expand_artist_dict_with_degree(\n","            base_artists=current_artist_dict,\n","            max_degree=degree + 1,\n","            max_related_per_artist=3\n","        )\n","        degree += 1\n","\n","    print(\"Reached max degree without achieving desired similarity.\")\n","    return recommendations'''\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"TlnKFuUfWKI6","executionInfo":{"status":"ok","timestamp":1746269217324,"user_tz":-180,"elapsed":8,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"71b033be-850c-4f2c-96de-cb17551794c4"},"execution_count":191,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'def iterative_recommendation(artist_name, song_name, base_artist_dict,\\n                             dataset=\\'all\\', num_recommendations=5,\\n                             min_score_threshold=0.7, max_degree_limit=3):\\n\\n    current_artist_dict = dict(base_artist_dict)\\n    degree = 1\\n    recommendations = None\\n\\n    while degree <= max_degree_limit:\\n        print(f\"Trying with degree {degree}, {len(current_artist_dict)} artists...\")\\n\\n        recommendations = recommend_from_favorite_artists(\\n            artist_name, song_name, current_artist_dict,\\n            dataset=dataset, num_recommendations=num_recommendations\\n        )\\n\\n        if recommendations is None or recommendations.empty:\\n            print(\"No recommendations found.\")\\n            return None\\n\\n        max_score = recommendations[\\'score\\'].max()\\n        print(f\"Max similarity score: {max_score:.3f}\")\\n\\n        if max_score >= min_score_threshold:\\n            print(f\"Acceptable recommendation found with score {max_score:.3f}.\")\\n            return recommendations\\n\\n        # Expand artist dict if similarity too low\\n        current_artist_dict = expand_artist_dict_with_degree(\\n            base_artists=current_artist_dict,\\n            max_degree=degree + 1,\\n            max_related_per_artist=3\\n        )\\n        degree += 1\\n\\n    print(\"Reached max degree without achieving desired similarity.\")\\n    return recommendations'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":191}]},{"cell_type":"code","source":["def recommend_from_favorite_artists_mahalanobis(\n","    artist_name, song_name, artist_score_dict,\n","    dataset='train', num_recommendations=10\n","):\n","    # Select dataset\n","    if dataset == 'train':\n","        query_data = train_data.reset_index(drop=True)\n","        transformed_data = transformed_train\n","    elif dataset == 'test':\n","        query_data = test_data.reset_index(drop=True)\n","        transformed_data = transformed_test\n","    elif dataset == 'all':\n","        query_data = df.reset_index(drop=True)\n","        scaled_data = scaler.transform(df[feature_columns])\n","        transformed_data = scaled_data @ L.T\n","    else:\n","        print(\"Invalid dataset.\")\n","        return None\n","\n","    # 🔍 Find query song index\n","    song_idx = query_data[\n","        (query_data['artist'].str.lower() == artist_name.lower()) &\n","        (query_data['song'].str.lower() == song_name.lower())\n","    ].index\n","\n","    if len(song_idx) == 0:\n","        print(\"Song not found.\")\n","        return None\n","\n","    query_idx = query_data.index.get_loc(song_idx[0])\n","    query_vector = transformed_data[query_idx]\n","\n","    # --- Step 1: Filter to only recommended artists\n","    filtered_data = query_data[query_data['artist'].isin(artist_score_dict.keys())].reset_index(drop=True)\n","\n","    if len(filtered_data) == 0:\n","        print(\"No songs available from favorite artists.\")\n","        return None\n","\n","    filtered_indices = filtered_data.index.to_numpy()\n","    filtered_transformed = transformed_data[filtered_indices]\n","\n","    # --- Step 2: Fit k-NN on filtered set\n","    temp_model = NearestNeighbors(n_neighbors=min(num_recommendations, len(filtered_data)), metric='euclidean')\n","    temp_model.fit(filtered_transformed)\n","\n","    # --- Step 3: Find neighbors\n","    distances, indices = temp_model.kneighbors([query_vector])\n","\n","    # --- Step 4: Build recommendations DataFrame\n","    recommendations = filtered_data.iloc[indices[0]].copy()\n","    similarity_scores = 1 / (1 + distances[0])  # optional: inverse distance → similarity\n","    recommendations['score'] = similarity_scores\n","\n","    # --- Step 5: Add artist boost\n","    boosts = recommendations['artist'].map(artist_score_dict).fillna(0)\n","    recommendations['boosted_score'] = recommendations['score'] + boosts * 0.1\n","\n","    # --- Step 6: Sort by boosted score\n","    recommendations = recommendations.sort_values(by='boosted_score', ascending=False)\n","\n","    return recommendations[['artist', 'song', 'genre', 'emotion', 'score', 'boosted_score']].reset_index(drop=True)\n"],"metadata":{"id":"aLxa-h3t0YS4","executionInfo":{"status":"ok","timestamp":1746269218105,"user_tz":-180,"elapsed":43,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":192,"outputs":[]},{"cell_type":"code","source":["def iterative_recommendation(\n","    artist_name, song_name, base_artist_dict,\n","    dataset='all', num_recommendations=5,\n","    min_score_threshold=0.89, max_degree_limit=3\n","):\n","    current_artist_dict = dict(base_artist_dict)\n","    degree = 1\n","    recommendations = None\n","\n","    print(\"=\"*50)\n","    print(f\"Starting iterative recommendation for: {artist_name} - {song_name}\")\n","    print(f\"Initial artist dict: {list(current_artist_dict.keys())}\")\n","    print(\"=\"*50)\n","\n","    while degree <= max_degree_limit:\n","        print(\"\\n\" + \"-\"*50)\n","        print(f\"Attempt at degree {degree}\")\n","        print(f\"Number of artists in artist dict: {len(current_artist_dict)}\")\n","        print(f\"Artist dict contents: {current_artist_dict}\")\n","\n","        # 🟢 USE THE NEW MAHALANOBIS FUNCTION\n","        recommendations = recommend_from_favorite_artists_mahalanobis(\n","            artist_name, song_name, current_artist_dict,\n","            dataset=dataset, num_recommendations=num_recommendations\n","        )\n","\n","        if recommendations is None:\n","            print(\"No recommendations returned (function returned None).\")\n","            return None\n","        elif recommendations.empty:\n","            print(\"Recommendations returned but empty DataFrame.\")\n","            return None\n","        else:\n","            print(\"\\nRecommendations received:\")\n","            print(recommendations)\n","\n","        if 'score' not in recommendations.columns:\n","            print(\"\\n⚠️ WARNING: 'score' column missing from recommendations!\")\n","            print(f\"Available columns: {list(recommendations.columns)}\")\n","            print(\"Cannot evaluate similarity threshold. Returning recommendations as is.\")\n","            return recommendations\n","\n","        # Remove same song\n","        mask_same_song = (\n","            (recommendations['artist'].str.lower() == artist_name.lower()) &\n","            (recommendations['song'].str.lower() == song_name.lower())\n","        )\n","        recommendations.loc[mask_same_song, 'score'] = 0\n","        recommendations = recommendations[~mask_same_song]\n","\n","        max_score = recommendations['score'].max()\n","        print(f\"\\nMax similarity score: {max_score:.4f}\")\n","\n","        if max_score >= min_score_threshold:\n","            print(f\"\\n✅ Acceptable recommendation found with score {max_score:.4f}.\")\n","            return recommendations\n","\n","        print(f\"\\n❌ Score {max_score:.4f} below threshold {min_score_threshold}. Expanding artist dict...\")\n","\n","        # Expand artist dict\n","        current_artist_dict = expand_artist_dict_with_degree(\n","            base_artists=current_artist_dict,\n","            max_degree=degree + 1,\n","            max_related_per_artist=3\n","        )\n","        print(f\"Expanded artist dict to {len(current_artist_dict)} artists.\")\n","\n","        degree += 1\n","\n","    print(\"\\n🚩 Reached max degree without achieving desired similarity.\")\n","    return recommendations\n"],"metadata":{"id":"43G6zJpNXbHN","executionInfo":{"status":"ok","timestamp":1746269218949,"user_tz":-180,"elapsed":1,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":193,"outputs":[]},{"cell_type":"markdown","source":["# Test"],"metadata":{"id":"rgH5QKjEkeZM"}},{"cell_type":"code","source":["# Get user input\n","artist_input = input(\"Enter your favorite artists (comma-separated): \")\n","#genre_input = input(\"Enter your favorite genres (comma-separated): \")\n","artist_list = artist_input.split(',')\n","#genre_list = genre_input.split(',')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1w-Wdny-4fc","executionInfo":{"status":"ok","timestamp":1746269231644,"user_tz":-180,"elapsed":11456,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"6f9e8751-8e24-4cf2-8afe-191e827118c7"},"execution_count":194,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter your favorite artists (comma-separated): Arctic Monkeys\n"]}]},{"cell_type":"code","source":["closest = recommend_artists(artist_list, save_to_file=True)\n","'''expanded_dict = expand_artist_dict_with_degree(\n","    base_artists=favorite_artists,\n","    max_degree=1,\n","    max_related_per_artist=1\n",")'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"5pVcWcU89R2z","executionInfo":{"status":"ok","timestamp":1746269234296,"user_tz":-180,"elapsed":1198,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"60f27b21-ced1-497a-d7f7-73539fa09949"},"execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["Found artist: Arctic Monkeys — fetching similar artists...\n"]},{"output_type":"execute_result","data":{"text/plain":["'expanded_dict = expand_artist_dict_with_degree(\\n    base_artists=favorite_artists,\\n    max_degree=1,\\n    max_related_per_artist=1\\n)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":195}]},{"cell_type":"code","source":["print(closest)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y-ZOVqi7PEn9","executionInfo":{"status":"ok","timestamp":1746269236007,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"bcd657d5-5162-4853-90e1-6d54dae55a8c"},"execution_count":196,"outputs":[{"output_type":"stream","name":"stdout","text":["{'The Last Shadow Puppets': 1, 'The Strokes': 1, 'Cage The Elephant': 1, 'The Kooks': 1, 'The Vaccines': 1, 'The Fratellis': 1, 'Modest Mouse': 1, 'Alex Turner': 1, 'Franz Ferdinand': 1, 'Radiohead': 1, 'The Wombats': 1, 'Kings of Leon': 1, 'Interpol': 1, 'Blur': 1, 'Bloc Party': 1, 'The Killers': 1, 'MGMT': 1, 'Tame Impala': 1, 'The Drums': 1, 'Kasabian': 1}\n"]}]},{"cell_type":"code","source":["print(len(closest))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zXK9FXna-PT4","executionInfo":{"status":"ok","timestamp":1746269236598,"user_tz":-180,"elapsed":2,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"f1d76b9f-fd10-41ee-975d-8e75f5fdad26"},"execution_count":197,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n"]}]},{"cell_type":"code","source":["pd.set_option('display.width', 200)\n","pd.set_option('display.max_colwidth', None)\n","recommended = iterative_recommendation(\"Taylor Swift\", 'Style', closest, dataset='all',num_recommendations=10)"],"metadata":{"id":"Wx495vqUuVvu","executionInfo":{"status":"ok","timestamp":1746269713909,"user_tz":-180,"elapsed":476604,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ffa9c7d7-90d9-49ff-d5ad-101fea6796ab"},"execution_count":198,"outputs":[{"output_type":"stream","name":"stdout","text":["==================================================\n","Starting iterative recommendation for: Taylor Swift - Style\n","Initial artist dict: ['The Last Shadow Puppets', 'The Strokes', 'Cage The Elephant', 'The Kooks', 'The Vaccines', 'The Fratellis', 'Modest Mouse', 'Alex Turner', 'Franz Ferdinand', 'Radiohead', 'The Wombats', 'Kings of Leon', 'Interpol', 'Blur', 'Bloc Party', 'The Killers', 'MGMT', 'Tame Impala', 'The Drums', 'Kasabian']\n","==================================================\n","\n","--------------------------------------------------\n","Attempt at degree 1\n","Number of artists in artist dict: 20\n","Artist dict contents: {'The Last Shadow Puppets': 1, 'The Strokes': 1, 'Cage The Elephant': 1, 'The Kooks': 1, 'The Vaccines': 1, 'The Fratellis': 1, 'Modest Mouse': 1, 'Alex Turner': 1, 'Franz Ferdinand': 1, 'Radiohead': 1, 'The Wombats': 1, 'Kings of Leon': 1, 'Interpol': 1, 'Blur': 1, 'Bloc Party': 1, 'The Killers': 1, 'MGMT': 1, 'Tame Impala': 1, 'The Drums': 1, 'Kasabian': 1}\n","\n","Recommendations received:\n","         artist                       song        genre  emotion     score  boosted_score\n","0      Interpol                  Number 10  alternative      joy  0.424725       0.524725\n","1     The Drums             I Cant Pretend          pop  sadness  0.416609       0.516609\n","2    Bloc Party        Shes Hearing Voices  alternative  sadness  0.394447       0.494447\n","3   The Killers         This River is Wild  alternative      joy  0.390589       0.490589\n","4     Radiohead                 Black Star  alternative  sadness  0.378772       0.478772\n","5  Modest Mouse            Polar Opposites  alternative    anger  0.371949       0.471949\n","6   The Strokes  Brooklyn Bridge to Chorus  alternative      joy  0.365379       0.465379\n","7   Tame Impala             Tomorrows Dust          pop  sadness  0.365307       0.465307\n","8  Modest Mouse                 Out of Gas  alternative    anger  0.363816       0.463816\n","9     Radiohead                      Kid A  alternative    anger  0.362472       0.462472\n","\n","Max similarity score: 0.4247\n","\n","❌ Score 0.4247 below threshold 0.89. Expanding artist dict...\n","Expanded artist dict to 78 artists.\n","\n","--------------------------------------------------\n","Attempt at degree 2\n","Number of artists in artist dict: 78\n","Artist dict contents: {'The Last Shadow Puppets': 1, 'The Strokes': 1, 'Cage The Elephant': 1, 'The Kooks': 1, 'The Vaccines': 1, 'The Fratellis': 1, 'Modest Mouse': 1, 'Alex Turner': 1, 'Franz Ferdinand': 1, 'Radiohead': 1, 'The Wombats': 1, 'Kings of Leon': 1, 'Interpol': 1, 'Blur': 1, 'Bloc Party': 1, 'The Killers': 1, 'MGMT': 1, 'Tame Impala': 1, 'The Drums': 1, 'Kasabian': 1, 'Arctic Monkeys': 1, 'Miles Kane': 1, 'Foster the People': 1, 'Two Door Cinema Club': 1, 'Kaiser Chiefs': 1, 'Foals': 1, 'The Libertines': 1, 'Gossip': 1, 'Jeff Buckley': 1, 'Pixies': 1, 'Circa Waves': 1, 'Stereophonics': 1, 'Editors': 1, 'Paul Banks': 1, 'Supergrass': 1, 'Pulp': 1, 'Suede': 1, 'Metric': 1, 'Snow Patrol': 1, 'The Voidz': 1, 'Vampire Weekend': 1, 'Gorillaz': 1, 'Mac Demarco': 1, 'Beach Fossils': 1, 'Surf Curse': 1, 'Portugal. The Man': 1, 'Spoon': 1, 'Babyshambles': 1, 'Skip the Use': 1, 'Beck': 1, 'Elliott Smith': 1, 'Fiona Apple': 1, 'Frank Black': 1, 'Sonic Youth': 1, 'The Breeders': 1, 'Inhaler': 1, 'Oasis': 1, 'Liam Gallagher': 1, 'Travis': 1, 'White Lies': 1, 'The Maccabees': 1, 'Elefant': 1, 'The Charlatans': 1, 'The Stone Roses': 1, 'The Auteurs': 1, 'Yeah Yeah Yeahs': 1, 'Keane': 1, 'Julian Casablancas': 1, 'machinegum': 1, 'Albert Hammond Jr.': 1, 'Strawberry Guy': 1, 'Eyedress': 1, 'Vacations': 1, 'Craft Spells': 1, 'Acid Ghost': 1, 'Alvvays': 1, 'The Growlers': 1, 'Declan McKenna': 1}\n","\n","Recommendations received:\n","              artist                  song        genre  emotion     score  boosted_score\n","0        Fiona Apple             Hot Knife  alternative    anger  0.554129       0.654129\n","1             Pixies           Levitate Me  alternative    anger  0.488357       0.588357\n","2     Liam Gallagher             The River          pop     fear  0.482273       0.582273\n","3        Fiona Apple    Every Single Night  alternative      joy  0.469969       0.569969\n","4          Radiohead        Electioneering  alternative      joy  0.468260       0.568260\n","5        Fiona Apple                I Know  alternative      joy  0.465693       0.565693\n","6        Alex Turner        Hiding tonight        other      joy  0.459615       0.559615\n","7  Cage The Elephant  Come a Little Closer  alternative  sadness  0.453640       0.553640\n","8        Fiona Apple              Get Gone  alternative      joy  0.437959       0.537959\n","9            Alvvays           Not My Baby          pop      joy  0.431943       0.531943\n","\n","Max similarity score: 0.5541\n","\n","❌ Score 0.5541 below threshold 0.89. Expanding artist dict...\n","Expanded artist dict to 256 artists.\n","\n","--------------------------------------------------\n","Attempt at degree 3\n","Number of artists in artist dict: 256\n","Artist dict contents: {'The Last Shadow Puppets': 1, 'The Strokes': 1, 'Cage The Elephant': 1, 'The Kooks': 1, 'The Vaccines': 1, 'The Fratellis': 1, 'Modest Mouse': 1, 'Alex Turner': 1, 'Franz Ferdinand': 1, 'Radiohead': 1, 'The Wombats': 1, 'Kings of Leon': 1, 'Interpol': 1, 'Blur': 1, 'Bloc Party': 1, 'The Killers': 1, 'MGMT': 1, 'Tame Impala': 1, 'The Drums': 1, 'Kasabian': 1, 'Arctic Monkeys': 1, 'Miles Kane': 1, 'Foster the People': 1, 'Two Door Cinema Club': 1, 'Kaiser Chiefs': 1, 'Foals': 1, 'The Libertines': 1, 'Gossip': 1, 'Jeff Buckley': 1, 'Pixies': 1, 'Circa Waves': 1, 'Stereophonics': 1, 'Editors': 1, 'Paul Banks': 1, 'Supergrass': 1, 'Pulp': 1, 'Suede': 1, 'Metric': 1, 'Snow Patrol': 1, 'The Voidz': 1, 'Vampire Weekend': 1, 'Gorillaz': 1, 'Mac Demarco': 1, 'Beach Fossils': 1, 'Surf Curse': 1, 'Portugal. The Man': 1, 'Spoon': 1, 'Babyshambles': 1, 'Skip the Use': 1, 'Beck': 1, 'Elliott Smith': 1, 'Fiona Apple': 1, 'Frank Black': 1, 'Sonic Youth': 1, 'The Breeders': 1, 'Inhaler': 1, 'Oasis': 1, 'Liam Gallagher': 1, 'Travis': 1, 'White Lies': 1, 'The Maccabees': 1, 'Elefant': 1, 'The Charlatans': 1, 'The Stone Roses': 1, 'The Auteurs': 1, 'Yeah Yeah Yeahs': 1, 'Keane': 1, 'Julian Casablancas': 1, 'machinegum': 1, 'Albert Hammond Jr.': 1, 'Strawberry Guy': 1, 'Eyedress': 1, 'Vacations': 1, 'Craft Spells': 1, 'Acid Ghost': 1, 'Alvvays': 1, 'The Growlers': 1, 'Declan McKenna': 1, 'Courtney Barnett': 1, 'Arcade Fire': 1, 'Dirty Pretty Things': 1, 'The Rakes': 1, 'Shaka Ponk': 1, 'Izia': 1, 'Eels': 1, 'The National': 1, 'The Dandy Warhols': 1, 'Belle and Sebastian': 1, 'Big Thief': 1, 'Mazzy Star': 1, 'Dinosaur Jr.': 1, 'PJ Harvey': 1, 'The Academic': 1, \"Noel Gallagher's High Flying Birds\": 1, 'Metro Boomin': 1, 'Drake': 1, 'Young Thug': 1, 'The Cinematics': 1, 'Bombay Bicycle Club': 1, 'Primal Scream': 1, 'Inspiral Carpets': 1, 'Ian Brown': 1, 'James': 1, 'Elastica': 1, 'Super Furry Animals': 1, \"The La's\": 1, 'Coldplay': 1, 'The Cardigans': 1, 'Kakkmaddafakka': 1, 'Crisaunt': 1, 'Mind’s Eye': 1, 'Current Joys': 1, 'Pity Party (Girls Club)': 1, 'Yot Club': 1, 'CASTLEBEAT': 1, 'Sales': 1, 'Day Wave': 1, 'Wild Nothing': 1, 'Bedroom': 1, 'Concorde': 1, 'Coin': 1, 'The 1975': 1, 'The War On Drugs': 1, 'Hot Hot Heat': 1, 'Blood Red Shoes': 1, 'We Are Scientists': 1, 'Muse': 1, 'Placebo': 1, 'Clou': 1, 'Christine and the Queens': 1, 'Nach': 1, 'Cat Power': 1, 'Half Moon Run': 1, 'Band of Horses': 1, 'The Kills': 1, 'Angel Olsen': 1, 'Weyes Blood': 1, 'Julia Jacklin': 1, 'Mojave 3': 1, 'Mudhoney': 1, 'The Lemonheads': 1, 'Anna Calvi': 1, 'Nick Cave & The Bad Seeds': 1, 'Beady Eye': 1, '21 Savage': 1, 'Travis Scott': 1, 'Future': 1, 'Gunna': 1, 'Offset': 1, 'Manic Street Preachers': 1, 'Elbow': 1, 'Happy Mondays': 1, 'Shed Seven': 1, 'Jerry Butler': 1, 'Four Tops': 1, 'Gene Chandler': 1, 'Ash': 1, 'Teenage Fanclub': 1, 'Cornershop': 1, 'Embrace': 1, 'Maroon 5': 1, 'Ed Sheeran': 1, 'The Cranberries': 1, 'R.E.M.': 1, 'The Virgins': 1, 'Oscar Lang': 1, 'Dream, Ivory': 1, 'dad sports': 1, 'Joy Again': 1, 'Far Caspian': 1, 'No Vacation': 1, \"Her's\": 1, 'The Walters': 1, 'Swimming Tapes': 1, 'DIIV': 1, 'Real Estate': 1, 'Tipling Rock': 1, 'Hippo Campus': 1, 'BØRNS': 1, 'Bad Suns': 1, 'Bleachers': 1, 'Lorde': 1, 'FINNEAS': 1, 'The Bravery': 1, 'Stuck in the Sound': 1, 'Maxïmo Park': 1, 'Hard-Fi': 1, 'Red Hot Chili Peppers': 1, 'Nada Surf': 1, 'Skunk Anansie': 1, 'chien noir': 1, 'Coline Rio': 1, 'Hervé': 1, 'Camélia Jordana': 1, 'Marie-Flore': 1, 'El Chojin': 1, 'ZPU': 1, 'Arma Blanca': 1, 'Antony & The Johnsons': 1, 'Ane Brun': 1, 'Aldous Harding': 1, 'Nick Mulvey': 1, 'Fink': 1, 'Death Cab for Cutie': 1, 'Of Monsters And Men': 1, 'Sufjan Stevens': 1, 'Sharon Van Etten': 1, 'Beach House': 1, 'Tad': 1, 'Meat Puppets': 1, 'L7': 1, 'Tindersticks': 1, 'Richard Ashcroft': 1, 'NAV': 1, 'Quavo': 1, 'Takeoff': 1, 'Ocean Colour Scene': 1, 'Jake Bugg': 1, 'The Temptations': 1, 'The Supremes': 1, 'Marvin Gaye': 1, 'The Impressions': 1, 'The Boo Radleys': 1, 'P!nk': 1, 'OneRepublic': 1, 'Sam Smith': 1, 'Shawn Mendes': 1, 'U2': 1, 'Alanis Morissette': 1, 'The Cure': 1, 'Talking Heads': 1, 'cults': 1, 'Parks, Squares and Alleys': 1, 'Summer Salt': 1, 'Vansire': 1, 'Mild High Club': 1, 'Djo': 1, 'The Marías': 1, 'boy pablo': 1, 'Hazel English': 1, 'Ride': 1, 'Slowdive': 1, 'Future Islands': 1, 'Yumi Zouma': 1, 'Last Dinosaurs': 1, 'Briston Maroney': 1, 'Rex Orange County': 1, 'lovelytheband': 1, 'Grouplove': 1, 'HAIM': 1, 'The Japanese House': 1, 'Taylor Swift': 1, 'Hozier': 1, 'Stephen Sanchez': 1, 'Gracie Abrams': 1, 'Nessa Barrett': 1}\n","\n","Recommendations received:\n","                               artist                             song        genre   emotion     score  boosted_score\n","0                        Taylor Swift  Youre Not Sorry Taylors Version          pop       joy  0.589288       0.689288\n","1                                  U2                     Drowning Man  alternative   sadness  0.554129       0.654129\n","2                              Pixies                       Gouge Away  alternative     anger  0.545983       0.645983\n","3  Noel Gallagher's High Flying Birds               Black Star Dancing  alternative       joy  0.508716       0.608716\n","4                         No Vacation                           August          pop      fear  0.508716       0.608716\n","5                      Arctic Monkeys                         Fireside  alternative      fear  0.494533       0.594533\n","6                               Spoon                     I Summon You  alternative  surprise  0.491152       0.591152\n","7                        Taylor Swift                Foever And Always          pop   sadness  0.488357       0.588357\n","8                       Elliott Smith                Tomorrow Tomorrow         folk   sadness  0.483840       0.583840\n","9                          Young Thug                           Climax          rap     anger  0.482273       0.582273\n","\n","Max similarity score: 0.5893\n","\n","❌ Score 0.5893 below threshold 0.89. Expanding artist dict...\n","Expanded artist dict to 658 artists.\n","\n","🚩 Reached max degree without achieving desired similarity.\n"]}]},{"cell_type":"code","source":["print(recommended)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKNADSdB7ER6","executionInfo":{"status":"ok","timestamp":1746264632843,"user_tz":-180,"elapsed":29,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"ffd40c1d-e38b-4ebf-b4bd-1fea059e437d"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["None\n"]}]},{"cell_type":"code","source":["while True:\n","    print(\"\\n--- Music Recommender ---\")\n","    artist = input(\"Enter artist name (or 'quit' to exit): \").strip()\n","    if artist.lower() == 'quit':\n","        print(\"Exiting recommendation system.\")\n","        break\n","\n","    song = input(\"Enter song name: \").strip()\n","    dataset = input(\"Search in which dataset? ('train', 'test', 'all'): \").strip().lower()\n","\n","    recommended = recommend_songs(artist, song, dataset=dataset)\n","\n","    if recommended is not None:\n","        print(f\"Recommendations similar to '{song}' by {artist}:\")\n","        print(recommended)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GSHehwJy3PB8","executionInfo":{"status":"ok","timestamp":1746148422136,"user_tz":-180,"elapsed":3257,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"c76d35ac-7f35-4e3a-cfb5-0f85e3ed2af6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Music Recommender ---\n","Enter artist name (or 'quit' to exit): quit\n","Exiting recommendation system.\n"]}]}]}