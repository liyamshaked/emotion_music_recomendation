{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cawwe_nsyEYbQdKJCq-sPIgSYMgGY20K","timestamp":1739996285656}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports"],"metadata":{"id":"54Nc2GdGPRUh"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"RqVyx74iEy3b","executionInfo":{"status":"ok","timestamp":1746257681759,"user_tz":-180,"elapsed":11244,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn import preprocessing\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","import seaborn as sns\n","import google.colab\n","import numpy as np\n","from sklearn.feature_selection import mutual_info_regression\n","import scipy.stats as stats\n","from sklearn.feature_selection import f_classif"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SZvKVjc5UaO1","executionInfo":{"status":"ok","timestamp":1746257708996,"user_tz":-180,"elapsed":1398,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"7ad354ce-4662-4560-9e69-9f74dcb0450f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["music_df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/project/Music/light_spotify_dataset.csv\")"],"metadata":{"id":"FXd5PEY6eP8h","executionInfo":{"status":"ok","timestamp":1746257712416,"user_tz":-180,"elapsed":2660,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","def normalize_cell(val):\n","    if isinstance(val, str):\n","        # Lowercase\n","        #val = val.lower()\n","        # Remove leading/trailing spaces\n","        val = val.strip()\n","        # Replace multiple spaces inside with a single space\n","        val = re.sub(r'\\s+', ' ', val)\n","        return val\n","    else:\n","        return val  # return numbers unchanged\n","\n","def normalize_dataframe(df):\n","    df.columns = [normalize_cell(col) for col in df.columns]\n","    df.columns = [x.lower() for x in df.columns] # Apply lower to each element of the Index\n","    df = df.applymap(normalize_cell)\n","    return df"],"metadata":{"id":"zFAdQG9GovFq","executionInfo":{"status":"ok","timestamp":1746257713242,"user_tz":-180,"elapsed":13,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["thirst_rows = music_df[music_df['emotion'] == 'thirst']\n","pink_rows = music_df[music_df['emotion'] == 'pink']\n","true_rows = music_df[music_df['emotion'] == 'True']\n","combined_rows = pd.concat([thirst_rows, pink_rows, true_rows])\n","df = music_df.copy()\n","df = df[~df['emotion'].isin(['thirst', 'pink', 'True'])]\n","df.loc[df['emotion'] == 'angry', 'emotion'] = 'anger'\n","df.groupby('emotion').size()\n","df = normalize_dataframe(df)\n","df = df.dropna()\n","df = df.drop_duplicates()\n","top_genres = df['genre'].value_counts().nlargest(11).index\n","df['genre']=df['genre'].apply(lambda x: x if x in top_genres else 'other')\n","df['genre']=df['genre'].replace('unknown,unknown,unknown','other')\n","#print(df['Genre'].value_counts(normalize=True).sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iuESzHg8lu6E","executionInfo":{"status":"ok","timestamp":1746257720095,"user_tz":-180,"elapsed":5640,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"113a882d-0cb9-42cd-d8f3-28e847b4fd08"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-cd6ae81b7231>:18: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n","  df = df.applymap(normalize_cell)\n"]}]},{"cell_type":"code","source":["df.groupby('key').size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":868},"id":"EFeQw65FlEq1","executionInfo":{"status":"ok","timestamp":1746257721644,"user_tz":-180,"elapsed":27,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"3d4fa905-f6e4-4a3a-f646-264da4bd3c51"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["key\n","A Maj     14822\n","A min      8447\n","A# Maj     6825\n","A# min     8666\n","B Maj      8432\n","B min     11251\n","C Maj     21154\n","C min      5353\n","C# Maj    19374\n","C# min     7953\n","D Maj     19806\n","D min      4278\n","D# Maj     4049\n","D# min     2870\n","E Maj      8822\n","E min      9082\n","F Maj      9901\n","F min      8486\n","F# Maj     7868\n","F# min     8083\n","G Maj     19932\n","G min      5480\n","G# Maj    11497\n","G# min     4538\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>key</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>A Maj</th>\n","      <td>14822</td>\n","    </tr>\n","    <tr>\n","      <th>A min</th>\n","      <td>8447</td>\n","    </tr>\n","    <tr>\n","      <th>A# Maj</th>\n","      <td>6825</td>\n","    </tr>\n","    <tr>\n","      <th>A# min</th>\n","      <td>8666</td>\n","    </tr>\n","    <tr>\n","      <th>B Maj</th>\n","      <td>8432</td>\n","    </tr>\n","    <tr>\n","      <th>B min</th>\n","      <td>11251</td>\n","    </tr>\n","    <tr>\n","      <th>C Maj</th>\n","      <td>21154</td>\n","    </tr>\n","    <tr>\n","      <th>C min</th>\n","      <td>5353</td>\n","    </tr>\n","    <tr>\n","      <th>C# Maj</th>\n","      <td>19374</td>\n","    </tr>\n","    <tr>\n","      <th>C# min</th>\n","      <td>7953</td>\n","    </tr>\n","    <tr>\n","      <th>D Maj</th>\n","      <td>19806</td>\n","    </tr>\n","    <tr>\n","      <th>D min</th>\n","      <td>4278</td>\n","    </tr>\n","    <tr>\n","      <th>D# Maj</th>\n","      <td>4049</td>\n","    </tr>\n","    <tr>\n","      <th>D# min</th>\n","      <td>2870</td>\n","    </tr>\n","    <tr>\n","      <th>E Maj</th>\n","      <td>8822</td>\n","    </tr>\n","    <tr>\n","      <th>E min</th>\n","      <td>9082</td>\n","    </tr>\n","    <tr>\n","      <th>F Maj</th>\n","      <td>9901</td>\n","    </tr>\n","    <tr>\n","      <th>F min</th>\n","      <td>8486</td>\n","    </tr>\n","    <tr>\n","      <th>F# Maj</th>\n","      <td>7868</td>\n","    </tr>\n","    <tr>\n","      <th>F# min</th>\n","      <td>8083</td>\n","    </tr>\n","    <tr>\n","      <th>G Maj</th>\n","      <td>19932</td>\n","    </tr>\n","    <tr>\n","      <th>G min</th>\n","      <td>5480</td>\n","    </tr>\n","    <tr>\n","      <th>G# Maj</th>\n","      <td>11497</td>\n","    </tr>\n","    <tr>\n","      <th>G# min</th>\n","      <td>4538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Example: assuming your DataFrame is named df and has a column 'key' like \"A Maj\"\n","# df = pd.read_csv('your_file.csv')  # if reading from file\n","\n","# 1️⃣ Split 'key' into 'pitch' and 'mode_str'\n","df[['pitch', 'mode_str']] = df['key'].str.split(' ', expand=True)\n","\n","# 2️⃣ Map pitch names to integers (Spotify key values)\n","pitch_class_map = {\n","    'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5,\n","    'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11\n","}\n","df['key_int'] = df['pitch'].map(pitch_class_map)\n","\n","# 3️⃣ Map mode strings to integers (Spotify mode values)\n","mode_map = {'Maj': 1, 'min': 0}\n","df['mode_int'] = df['mode_str'].map(mode_map)\n","\n","# 4️⃣ Define function for circular encoding of key\n","def encode_key_circular(key):\n","    if pd.isna(key):\n","        return (0.0, 0.0)  # handle missing keys\n","    angle = 2 * np.pi * key / 12\n","    return np.cos(angle), np.sin(angle)\n","\n","# 5️⃣ Apply circular encoding\n","df['cos_pitch'], df['sin_pitch'] = zip(*df['key_int'].map(encode_key_circular))\n","\n","# ✅ DONE → final DataFrame now has columns: 'key_int', 'mode_int', 'cos_pitch', 'sin_pitch'\n"],"metadata":{"id":"A8Tf-9U4KgSm","executionInfo":{"status":"ok","timestamp":1746257725796,"user_tz":-180,"elapsed":2553,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"ygpRcMs8KroY","executionInfo":{"status":"ok","timestamp":1746257729006,"user_tz":-180,"elapsed":92,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"e38d5747-d4a4-44af-ec7f-3227566d9f6b"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  artist                   song  emotion  variance genre  release date  \\\n","0   ABBA  She's My Kind Of Girl      joy  0.447619   pop          2014   \n","1   ABBA       Andante, Andante     love  0.202222   pop          1980   \n","2   ABBA         As Good As New  sadness  0.300881   pop          1979   \n","3   ABBA                   Bang      joy  0.355000   pop          1975   \n","4   ABBA       Bang-A-Boomerang      joy  0.355000   pop          1975   \n","\n","      key  tempo  loudness explicit  ...  speechiness  liveness  acousticness  \\\n","0   F Maj    128     -6.00       No  ...            3        31             7   \n","1  A# Maj    102    -10.72       No  ...            2         7            68   \n","2   E Maj    139     -5.70       No  ...            3         8            20   \n","3   F Maj    132     -3.00       No  ...            3        32             3   \n","4   F Maj    132     -3.00       No  ...            3        32             3   \n","\n","   instrumentalness  pitch  mode_str  key_int  mode_int cos_pitch sin_pitch  \n","0                 0      F       Maj        5         1 -0.866025  0.500000  \n","1                 0     A#       Maj       10         1  0.500000 -0.866025  \n","2                 2      E       Maj        4         1 -0.500000  0.866025  \n","3                 0      F       Maj        5         1 -0.866025  0.500000  \n","4                 0      F       Maj        5         1 -0.866025  0.500000  \n","\n","[5 rows x 24 columns]"],"text/html":["\n","  <div id=\"df-4322501d-e9e7-4602-98a7-25667432bbc7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>artist</th>\n","      <th>song</th>\n","      <th>emotion</th>\n","      <th>variance</th>\n","      <th>genre</th>\n","      <th>release date</th>\n","      <th>key</th>\n","      <th>tempo</th>\n","      <th>loudness</th>\n","      <th>explicit</th>\n","      <th>...</th>\n","      <th>speechiness</th>\n","      <th>liveness</th>\n","      <th>acousticness</th>\n","      <th>instrumentalness</th>\n","      <th>pitch</th>\n","      <th>mode_str</th>\n","      <th>key_int</th>\n","      <th>mode_int</th>\n","      <th>cos_pitch</th>\n","      <th>sin_pitch</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ABBA</td>\n","      <td>She's My Kind Of Girl</td>\n","      <td>joy</td>\n","      <td>0.447619</td>\n","      <td>pop</td>\n","      <td>2014</td>\n","      <td>F Maj</td>\n","      <td>128</td>\n","      <td>-6.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>31</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ABBA</td>\n","      <td>Andante, Andante</td>\n","      <td>love</td>\n","      <td>0.202222</td>\n","      <td>pop</td>\n","      <td>1980</td>\n","      <td>A# Maj</td>\n","      <td>102</td>\n","      <td>-10.72</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>68</td>\n","      <td>0</td>\n","      <td>A#</td>\n","      <td>Maj</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0.500000</td>\n","      <td>-0.866025</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ABBA</td>\n","      <td>As Good As New</td>\n","      <td>sadness</td>\n","      <td>0.300881</td>\n","      <td>pop</td>\n","      <td>1979</td>\n","      <td>E Maj</td>\n","      <td>139</td>\n","      <td>-5.70</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>20</td>\n","      <td>2</td>\n","      <td>E</td>\n","      <td>Maj</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>-0.500000</td>\n","      <td>0.866025</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ABBA</td>\n","      <td>Bang</td>\n","      <td>joy</td>\n","      <td>0.355000</td>\n","      <td>pop</td>\n","      <td>1975</td>\n","      <td>F Maj</td>\n","      <td>132</td>\n","      <td>-3.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ABBA</td>\n","      <td>Bang-A-Boomerang</td>\n","      <td>joy</td>\n","      <td>0.355000</td>\n","      <td>pop</td>\n","      <td>1975</td>\n","      <td>F Maj</td>\n","      <td>132</td>\n","      <td>-3.00</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>F</td>\n","      <td>Maj</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>-0.866025</td>\n","      <td>0.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4322501d-e9e7-4602-98a7-25667432bbc7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4322501d-e9e7-4602-98a7-25667432bbc7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4322501d-e9e7-4602-98a7-25667432bbc7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-987a0547-6904-40df-882c-22f05cc957bb\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-987a0547-6904-40df-882c-22f05cc957bb')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-987a0547-6904-40df-882c-22f05cc957bb button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["numerical_columns = ['variance','tempo','loudness','popularity','energy','danceability','positiveness','speechiness',\n","                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","\n","df[numerical_columns].hist(bins=15, figsize=(15, 10))\n","plt.suptitle('Distribution of Numerical Variables')\n","plt.show()\n","\n","# Frequency of categorical variables\n","print()\n","print(df['genre'].value_counts())\n","\n","# Top 10 most frequent artists\n","print()\n","print(df['artist'].value_counts().head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"YOqf2D0oq59R","executionInfo":{"status":"ok","timestamp":1746257736262,"user_tz":-180,"elapsed":2701,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"53f4aec7-3884-480f-fb74-b588e920325c"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 16 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","genre\n","Unknown,Unknown,Unknown    50014\n","pop                        46881\n","rap                        33201\n","alternative                19047\n","other                      18260\n","hip-hop                    17316\n","rock                       12956\n","folk                       10620\n","metal                      10489\n","soul                        8740\n","electronic                  5144\n","jazz                        4301\n","Name: count, dtype: int64\n","\n","artist\n","Genius English Translations    1604\n","Lil Wayne                       753\n","Juice WRLD                      647\n","Chris Brown                     589\n","Gucci Mane                      522\n","Drake                           513\n","Kanye West                      471\n","BONES                           456\n","Chief Keef                      453\n","Eminem                          423\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["!pip install transformers\n","!pip install torch\n","!pip install gensim\n","!pip install requests"],"metadata":{"id":"D5ZDdL6N0Wj_","executionInfo":{"status":"ok","timestamp":1746257897003,"user_tz":-180,"elapsed":142938,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"48dea7bf-af34-480f-c048-501984e23fae"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.30.2)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.3.2)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.13.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.4.26)\n","Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n","Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch)\n","  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch)\n","  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch)\n","  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch)\n","  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.4.5.8 (from torch)\n","  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.2.1.3 (from torch)\n","  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.5.147 (from torch)\n","  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch)\n","  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch)\n","  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch)\n","  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n","Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m65.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m49.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m35.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m769.4 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m80.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n","  Attempting uninstall: nvidia-nvjitlink-cu12\n","    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n","    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n","      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n","  Attempting uninstall: nvidia-curand-cu12\n","    Found existing installation: nvidia-curand-cu12 10.3.6.82\n","    Uninstalling nvidia-curand-cu12-10.3.6.82:\n","      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n","  Attempting uninstall: nvidia-cufft-cu12\n","    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n","    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n","      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n","  Attempting uninstall: nvidia-cuda-runtime-cu12\n","    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n","    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n","    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n","    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-cupti-cu12\n","    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n","    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n","  Attempting uninstall: nvidia-cublas-cu12\n","    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n","    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n","      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n","  Attempting uninstall: nvidia-cusparse-cu12\n","    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n","    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n","      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n","  Attempting uninstall: nvidia-cudnn-cu12\n","    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n","    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n","      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n","  Attempting uninstall: nvidia-cusolver-cu12\n","    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n","    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n","      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n","Successfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127\n","Collecting gensim\n","  Downloading gensim-4.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.1 kB)\n","Collecting numpy<2.0,>=1.18.5 (from gensim)\n","  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting scipy<1.14.0,>=1.7.0 (from gensim)\n","  Downloading scipy-1.13.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.6/60.6 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.11/dist-packages (from gensim) (7.1.0)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open>=1.8.1->gensim) (1.17.2)\n","Downloading gensim-4.3.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (26.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.7/26.7 MB\u001b[0m \u001b[31m61.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m22.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading scipy-1.13.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (38.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.6/38.6 MB\u001b[0m \u001b[31m21.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: numpy, scipy, gensim\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 2.0.2\n","    Uninstalling numpy-2.0.2:\n","      Successfully uninstalled numpy-2.0.2\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.15.2\n","    Uninstalling scipy-1.15.2:\n","      Successfully uninstalled scipy-1.15.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed gensim-4.3.3 numpy-1.26.4 scipy-1.13.1\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.4.26)\n"]}]},{"cell_type":"code","source":["import requests\n","from collections import Counter\n","import json\n","\n","def get_artist_id(artist_name):\n","    url = f\"https://api.deezer.com/search/artist?q={artist_name}\"\n","    response = requests.get(url)\n","    data = response.json()\n","    if data['data']:\n","        return data['data'][0]['id']\n","    return None\n","\n","def get_similar_artists(artist_id):\n","    url = f\"https://api.deezer.com/artist/{artist_id}/related\"\n","    response = requests.get(url)\n","    data = response.json()\n","    return [artist['name'] for artist in data['data']]\n","\n","def recommend_artists(favorite_artists, save_to_file=False):\n","    all_similar = []\n","\n","    for name in favorite_artists:\n","        artist_id = get_artist_id(name)\n","        if artist_id:\n","            print(f\"Found artist: {name} — fetching similar artists...\")\n","            similar = get_similar_artists(artist_id)\n","            all_similar.extend(similar)\n","        else:\n","            print(f\"Could not find artist: {name}\")\n","\n","    recommended = Counter(all_similar)\n","\n","    # Filter out any artists already in favorites\n","    recommended = {\n","        artist: count for artist, count in recommended.items()\n","        if artist not in favorite_artists\n","    }\n","\n","    if save_to_file:\n","        with open(\"recommended_artists.json\", \"w\") as f:\n","            json.dump(recommended, f, indent=2)\n","\n","    return recommended\n","\n","# === Example Usage ===\n","'''favorite_artists = [\n","    \"The Beatles\",\n","    \"Coldplay\",\n","    \"Arctic Monkeys\",\n","    \"Elton John\",\n","    \"Polo & Pan\"\n","]'''\n","\n","\n","#print(\"\\nTop recommended artists with scores:\")\n","#for artist, score in sorted(recommendations.items(), key=lambda x: x[1], reverse=True):\n","#    print(f\"- {artist}: {score}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"ghtkRb5d1heB","executionInfo":{"status":"ok","timestamp":1746258415520,"user_tz":-180,"elapsed":544,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"4bdd0186-5017-4d15-a291-a5c84399de55"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'favorite_artists = [\\n    \"The Beatles\",\\n    \"Coldplay\",\\n    \"Arctic Monkeys\",\\n    \"Elton John\",\\n    \"Polo & Pan\"\\n]'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Sample 10% of the data\n","sample_size = 0.05\n","train_data, test_data = train_test_split(df.sample(frac=sample_size, random_state=42), test_size=0.25, random_state=42)\n","train_data = train_data.reset_index(drop=True)\n","test_data = test_data.reset_index(drop=True)\n","print(\"Viewing training x_train\", train_data.shape)\n","print(\"Viewing test test_data\", test_data.shape)\n","\n","# Scale only on train_data\n","#scaler = StandardScaler()\n","#scaled_features = scaler.fit_transform(train_data[feature_columns])\n","#n_samples = scaled_features.shape[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ipdpyg8QsWh8","executionInfo":{"status":"ok","timestamp":1746258418827,"user_tz":-180,"elapsed":173,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"f03995ed-11e5-473f-80a8-bb0123774f04"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Viewing training x_train (8886, 24)\n","Viewing test test_data (2962, 24)\n"]}]},{"cell_type":"code","source":["!pip install kneed\n","!pip install tqdm"],"metadata":{"id":"sNzzoE1MzCRz","executionInfo":{"status":"ok","timestamp":1746258430262,"user_tz":-180,"elapsed":6438,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1679b5b1-e487-4a64-c0bb-5639996907da"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting kneed\n","  Downloading kneed-0.8.5-py3-none-any.whl.metadata (5.5 kB)\n","Requirement already satisfied: numpy>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from kneed) (1.26.4)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from kneed) (1.13.1)\n","Downloading kneed-0.8.5-py3-none-any.whl (10 kB)\n","Installing collected packages: kneed\n","Successfully installed kneed-0.8.5\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (4.67.1)\n"]}]},{"cell_type":"code","source":["#!pip install tqdm\n","from tqdm import tqdm\n","from sklearn.neighbors import NearestNeighbors # Import NearestNeighbors\n","from kneed import KneeLocator # Import KneeLocator\n","\n","\n","feature_columns = ['variance','tempo','loudness','energy','danceability','positiveness','speechiness',\n","                     'liveness','acousticness', 'instrumentalness','cos_pitch', 'sin_pitch', 'mode_int']\n","scaler = StandardScaler()\n","scaled_features_train = scaler.fit_transform(train_data[feature_columns])\n","scaled_features_test = scaler.transform(test_data[feature_columns])\n","\n","n_train_samples = scaled_features_train.shape[0]\n","\n","# Range of k values to test\n","k_values = list(range(1, 31))\n","mean_distances = []\n","\n","# Progress bar\n","progress_bar = tqdm(k_values, desc=\"Starting k testing\", unit=\"k\")\n","\n","# Find optimal k\n","for idx, k in enumerate(progress_bar, start=1):\n","    progress_bar.set_description(f\"Training k={k} ({idx}/{len(k_values)}) on {n_train_samples} train samples\")\n","\n","    model = NearestNeighbors(n_neighbors=k, metric='cosine')\n","    model.fit(scaled_features_train)\n","\n","    distances, indices = model.kneighbors(scaled_features_train)\n","\n","    mean_distance = np.mean(distances)\n","    mean_distances.append(mean_distance)\n","\n","# Plot mean distance vs. k\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, mean_distances, marker='o')\n","plt.title('Average Distance for Different Values of k')\n","plt.xlabel('Number of Neighbors (k)')\n","plt.ylabel('Average Distance')\n","plt.grid(True)\n","plt.show()\n","\n","# Get best k\n","best_k_min = k_values[np.argmin(mean_distances)]\n","print(f\"Best k (min distance): {best_k_min}\")\n","\n","# Optional: elbow detection\n","kneedle = KneeLocator(k_values, mean_distances, curve='convex', direction='decreasing')\n","best_k_elbow = kneedle.knee\n","print(f\"Best k (elbow method): {best_k_elbow}\")\n","\n","# Use elbow if found, else min distance\n","final_k = best_k_elbow if best_k_elbow else best_k_min\n","\n","# Train final model on train data\n","model = NearestNeighbors(n_neighbors=final_k, metric='cosine')\n","model.fit(scaled_features_train)\n","\n","# Recommend function (can search train or test song)\n","\n","\n","# Example recommendation (from test set)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"P2pgPYAh0KN0","executionInfo":{"status":"ok","timestamp":1746258508277,"user_tz":-180,"elapsed":71271,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"04514011-255d-450b-e4fd-8bfd70c8a8d7"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["Training k=30 (30/30) on 8886 train samples: 100%|██████████| 30/30 [01:10<00:00,  2.35s/k]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Best k (min distance): 1\n","Best k (elbow method): 1\n"]},{"output_type":"execute_result","data":{"text/plain":["NearestNeighbors(metric='cosine', n_neighbors=np.int64(1))"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>NearestNeighbors(metric=&#x27;cosine&#x27;, n_neighbors=np.int64(1))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>NearestNeighbors</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.NearestNeighbors.html\">?<span>Documentation for NearestNeighbors</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>NearestNeighbors(metric=&#x27;cosine&#x27;, n_neighbors=np.int64(1))</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["def recommend_from_favorite_artists(artist_name, song_name, artist_score_dict, dataset='train', num_recommendations=15):\n","    # Choose data and features\n","    if dataset == 'test':\n","        query_data = test_data\n","        features_data = scaled_features_test\n","    elif dataset == 'train':\n","        query_data = train_data\n","        features_data = scaled_features_train\n","    elif dataset == 'all':\n","        query_data = df.reset_index(drop=True)\n","        features_data = scaler.transform(df[feature_columns])\n","    else:\n","        print(\"Invalid dataset.\")\n","        return\n","\n","    # Find index of the input song\n","    song_idx = query_data[\n","        (query_data['artist'].str.lower() == artist_name.lower()) &\n","        (query_data['song'].str.lower() == song_name.lower())\n","    ].index\n","\n","    if len(song_idx) == 0:\n","        print(\"Song not found.\")\n","        return\n","\n","    song_idx = query_data.index.get_loc(song_idx[0])\n","    query_vector = features_data[song_idx]\n","\n","    # --- Step 1: Filter data to only recommended artists ---\n","    filtered_data = query_data[query_data['artist'].isin(artist_score_dict.keys())].reset_index(drop=True)\n","    filtered_features = scaler.transform(filtered_data[feature_columns])\n","\n","    # --- Step 2: Fit temporary k-NN model on just those artists ---\n","    temp_model = NearestNeighbors(n_neighbors=num_recommendations, metric='cosine')\n","    temp_model.fit(filtered_features)\n","\n","    distances, indices = temp_model.kneighbors([query_vector])\n","\n","    # --- Step 3: Build recommendations ---\n","    recommendations = filtered_data.iloc[indices[0]].copy()\n","    scores = 1 - distances[0]  # similarity scores\n","    recommendations['score'] = scores\n","\n","    # Optional: sort by artist boost too\n","    boosts = recommendations['artist'].map(artist_score_dict)\n","    recommendations['boosted_score'] = recommendations['score'] + boosts * 0.1  # optional boost\n","\n","    # Sort by boosted score\n","    recommendations = recommendations.sort_values(by='boosted_score', ascending=False)\n","\n","    return recommendations[['artist', 'song', 'genre', 'emotion', 'score', 'boosted_score']]\n"],"metadata":{"id":"aLxa-h3t0YS4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import deque\n","\n","def expand_artist_dict_with_degree(base_artists, max_degree=2, max_related_per_artist=3):\n","    expanded = dict(base_artists)  # original dict: {artist_name: score}\n","    visited = set(base_artists.keys())\n","    queue = deque([(artist, 1) for artist in base_artists.keys()])  # (artist, current_degree)\n","\n","    while queue:\n","        current_artist, degree = queue.popleft()\n","\n","        if degree > max_degree:\n","            continue\n","\n","        artist_id = get_artist_id(current_artist)\n","        if not artist_id:\n","            continue\n","\n","        related_artists = get_similar_artists(artist_id)[:max_related_per_artist]\n","\n","        for related in related_artists:\n","            if related not in visited:\n","                visited.add(related)\n","                score = max(1, base_artists.get(current_artist, 1) - degree + 1)\n","                expanded[related] = score\n","                queue.append((related, degree + 1))\n","\n","    return expanded"],"metadata":{"id":"yWjhuwtD-ITw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''def iterative_recommendation(artist_name, song_name, base_artist_dict,\n","                             dataset='all', num_recommendations=5,\n","                             min_score_threshold=0.7, max_degree_limit=3):\n","\n","    current_artist_dict = dict(base_artist_dict)\n","    degree = 1\n","    recommendations = None\n","\n","    while degree <= max_degree_limit:\n","        print(f\"Trying with degree {degree}, {len(current_artist_dict)} artists...\")\n","\n","        recommendations = recommend_from_favorite_artists(\n","            artist_name, song_name, current_artist_dict,\n","            dataset=dataset, num_recommendations=num_recommendations\n","        )\n","\n","        if recommendations is None or recommendations.empty:\n","            print(\"No recommendations found.\")\n","            return None\n","\n","        max_score = recommendations['score'].max()\n","        print(f\"Max similarity score: {max_score:.3f}\")\n","\n","        if max_score >= min_score_threshold:\n","            print(f\"Acceptable recommendation found with score {max_score:.3f}.\")\n","            return recommendations\n","\n","        # Expand artist dict if similarity too low\n","        current_artist_dict = expand_artist_dict_with_degree(\n","            base_artists=current_artist_dict,\n","            max_degree=degree + 1,\n","            max_related_per_artist=3\n","        )\n","        degree += 1\n","\n","    print(\"Reached max degree without achieving desired similarity.\")\n","    return recommendations'''\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"TlnKFuUfWKI6","executionInfo":{"status":"ok","timestamp":1746168599370,"user_tz":-180,"elapsed":5,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"bac9fa47-25a8-43f1-d37d-d329b0ef03cb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'def iterative_recommendation(artist_name, song_name, base_artist_dict, \\n                             dataset=\\'all\\', num_recommendations=5, \\n                             min_score_threshold=0.7, max_degree_limit=3):\\n\\n    current_artist_dict = dict(base_artist_dict)\\n    degree = 1\\n    recommendations = None\\n\\n    while degree <= max_degree_limit:\\n        print(f\"Trying with degree {degree}, {len(current_artist_dict)} artists...\")\\n\\n        recommendations = recommend_from_favorite_artists(\\n            artist_name, song_name, current_artist_dict,\\n            dataset=dataset, num_recommendations=num_recommendations\\n        )\\n\\n        if recommendations is None or recommendations.empty:\\n            print(\"No recommendations found.\")\\n            return None\\n\\n        max_score = recommendations[\\'score\\'].max()\\n        print(f\"Max similarity score: {max_score:.3f}\")\\n\\n        if max_score >= min_score_threshold:\\n            print(f\"Acceptable recommendation found with score {max_score:.3f}.\")\\n            return recommendations\\n\\n        # Expand artist dict if similarity too low\\n        current_artist_dict = expand_artist_dict_with_degree(\\n            base_artists=current_artist_dict,\\n            max_degree=degree + 1,\\n            max_related_per_artist=3\\n        )\\n        degree += 1\\n\\n    print(\"Reached max degree without achieving desired similarity.\")\\n    return recommendations'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["def iterative_recommendation(artist_name, song_name, base_artist_dict,\n","                             dataset='all', num_recommendations=5,\n","                             min_score_threshold=0.89, max_degree_limit=3):\n","\n","    current_artist_dict = dict(base_artist_dict)\n","    degree = 1\n","    recommendations = None\n","\n","    print(\"=\"*50)\n","    print(f\"Starting iterative recommendation for: {artist_name} - {song_name}\")\n","    print(f\"Initial artist dict: {list(current_artist_dict.keys())}\")\n","    print(\"=\"*50)\n","\n","    while degree <= max_degree_limit:\n","        print(\"\\n\" + \"-\"*50)\n","        print(f\"Attempt at degree {degree}\")\n","        print(f\"Number of artists in artist dict: {len(current_artist_dict)}\")\n","        print(f\"Artist dict contents: {current_artist_dict}\")\n","\n","        recommendations = recommend_from_favorite_artists(\n","            artist_name, song_name, current_artist_dict,\n","            dataset=dataset, num_recommendations=num_recommendations\n","        )\n","\n","        if recommendations is None:\n","            print(\"No recommendations returned (function returned None).\")\n","            return None\n","        elif recommendations.empty:\n","            print(\"Recommendations returned but empty DataFrame.\")\n","            return None\n","        else:\n","            print(\"\\nRecommendations received:\")\n","            print(recommendations)\n","\n","        # Check if 'score' column exists\n","        if 'score' not in recommendations.columns:\n","            print(\"\\n⚠️ WARNING: 'score' column missing from recommendations!\")\n","            print(f\"Available columns: {list(recommendations.columns)}\")\n","            print(\"Cannot evaluate similarity threshold. Returning recommendations as is.\")\n","            return recommendations\n","        # 🟢 ADD THIS BLOCK HERE:\n","        mask_same_song = (\n","            (recommendations['artist'].str.lower() == artist_name.lower()) &\n","             (recommendations['song'].str.lower() == song_name.lower()))\n","        recommendations.loc[mask_same_song, 'score'] = 0\n","        print(f\"Zeroed score for same song+artist: {recommendations[mask_same_song]}\")\n","        # 🟢 NEW: remove the song entirely\n","        recommendations = recommendations[~mask_same_song]\n","        print(f\"Removed same song+artist from recommendations.\")\n","\n","        max_score = recommendations['score'].max()\n","        print(f\"\\nMax similarity score in recommendations: {max_score:.4f}\")\n","\n","        if max_score >= min_score_threshold:\n","            print(f\"\\n✅ Acceptable recommendation found with score {max_score:.4f}.\")\n","            return recommendations\n","\n","        print(f\"\\n❌ Score {max_score:.4f} below threshold {min_score_threshold}. Expanding artist dict...\")\n","\n","        # Expand artist dict\n","        current_artist_dict = expand_artist_dict_with_degree(\n","            base_artists=current_artist_dict,\n","            max_degree=degree + 1,\n","            max_related_per_artist=3\n","        )\n","        print(f\"Expanded artist dict to {len(current_artist_dict)} artists: {list(current_artist_dict.keys())}\")\n","\n","        degree += 1\n","\n","    print(\"\\n🚩 Reached max degree without achieving desired similarity.\")\n","    print(f\"Returning last recommendations (max score: {max_score:.4f}).\")\n","    return recommendations\n"],"metadata":{"id":"43G6zJpNXbHN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get user input\n","artist_input = input(\"Enter your favorite artists (comma-separated): \")\n","#genre_input = input(\"Enter your favorite genres (comma-separated): \")\n","artist_list = artist_input.split(',')\n","#genre_list = genre_input.split(',')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1w-Wdny-4fc","executionInfo":{"status":"ok","timestamp":1746168851654,"user_tz":-180,"elapsed":249044,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"ffa16fc6-f651-45b0-a5c7-12f4048e7c43"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter your favorite artists (comma-separated): Taylor Swift,  Olivia Rodirigo\n"]}]},{"cell_type":"code","source":["closest = recommend_artists(artist_list, save_to_file=True)\n","'''expanded_dict = expand_artist_dict_with_degree(\n","    base_artists=favorite_artists,\n","    max_degree=1,\n","    max_related_per_artist=1\n",")'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":71},"id":"5pVcWcU89R2z","executionInfo":{"status":"ok","timestamp":1746168856580,"user_tz":-180,"elapsed":988,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"fa8917ef-2c29-4e22-a084-187504b36663"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found artist: Taylor Swift — fetching similar artists...\n","Found artist:   Olivia Rodirigo — fetching similar artists...\n"]},{"output_type":"execute_result","data":{"text/plain":["'expanded_dict = expand_artist_dict_with_degree(\\n    base_artists=favorite_artists,\\n    max_degree=1,\\n    max_related_per_artist=1\\n)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["print(closest)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y-ZOVqi7PEn9","executionInfo":{"status":"ok","timestamp":1746168859517,"user_tz":-180,"elapsed":4,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"501df59e-d84e-450e-f265-36ac80afb3a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Gracie Abrams': 2, 'Olivia Rodrigo': 1, 'Sabrina Carpenter': 2, 'One Direction': 1, 'Shawn Mendes': 1, 'Miley Cyrus': 1, 'Harry Styles': 2, 'Camila Cabello': 1, 'Little Mix': 1, 'Zara Larsson': 1, 'Adele': 1, 'Niall Horan': 1, 'Sam Smith': 1, 'Katy Perry': 1, 'Halsey': 1, 'Maisie Peters': 1, 'Ariana Grande': 1, 'Selena Gomez': 2, 'Meghan Trainor': 1, 'Ed Sheeran': 1, 'Conan Gray': 1, 'Madison Beer': 1, 'Nessa Barrett': 1, 'Ashe': 1, 'Billie Eilish': 1, 'Lizzy McAlpine': 1, 'Tate McRae': 1, 'Reneé Rapp': 1, 'Chappell Roan': 1, '5 Seconds Of Summer': 1, 'Lorde': 1, 'Joshua Bassett': 1, 'ZAYN': 1, 'Lana Del Rey': 1, 'Troye Sivan': 1}\n"]}]},{"cell_type":"code","source":["print(len(closest))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zXK9FXna-PT4","executionInfo":{"status":"ok","timestamp":1746168863561,"user_tz":-180,"elapsed":4,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"b944187f-dc37-4ead-a98c-dfeb5fab409f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["35\n"]}]},{"cell_type":"code","source":["pd.set_option('display.width', 200)\n","pd.set_option('display.max_colwidth', None)\n","recommended = iterative_recommendation(\"Electric Light Orchestra\", 'Mr. Blue Sky', closest, dataset='all',num_recommendations=10)"],"metadata":{"id":"Wx495vqUuVvu","executionInfo":{"status":"ok","timestamp":1746168925479,"user_tz":-180,"elapsed":257,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c817933e-43fb-438d-a78b-183289a98809"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["==================================================\n","Starting iterative recommendation for: Electric Light Orchestra - Mr. Blue Sky\n","Initial artist dict: ['Gracie Abrams', 'Olivia Rodrigo', 'Sabrina Carpenter', 'One Direction', 'Shawn Mendes', 'Miley Cyrus', 'Harry Styles', 'Camila Cabello', 'Little Mix', 'Zara Larsson', 'Adele', 'Niall Horan', 'Sam Smith', 'Katy Perry', 'Halsey', 'Maisie Peters', 'Ariana Grande', 'Selena Gomez', 'Meghan Trainor', 'Ed Sheeran', 'Conan Gray', 'Madison Beer', 'Nessa Barrett', 'Ashe', 'Billie Eilish', 'Lizzy McAlpine', 'Tate McRae', 'Reneé Rapp', 'Chappell Roan', '5 Seconds Of Summer', 'Lorde', 'Joshua Bassett', 'ZAYN', 'Lana Del Rey', 'Troye Sivan']\n","==================================================\n","\n","--------------------------------------------------\n","Attempt at degree 1\n","Number of artists in artist dict: 35\n","Artist dict contents: {'Gracie Abrams': 2, 'Olivia Rodrigo': 1, 'Sabrina Carpenter': 2, 'One Direction': 1, 'Shawn Mendes': 1, 'Miley Cyrus': 1, 'Harry Styles': 2, 'Camila Cabello': 1, 'Little Mix': 1, 'Zara Larsson': 1, 'Adele': 1, 'Niall Horan': 1, 'Sam Smith': 1, 'Katy Perry': 1, 'Halsey': 1, 'Maisie Peters': 1, 'Ariana Grande': 1, 'Selena Gomez': 2, 'Meghan Trainor': 1, 'Ed Sheeran': 1, 'Conan Gray': 1, 'Madison Beer': 1, 'Nessa Barrett': 1, 'Ashe': 1, 'Billie Eilish': 1, 'Lizzy McAlpine': 1, 'Tate McRae': 1, 'Reneé Rapp': 1, 'Chappell Roan': 1, '5 Seconds Of Summer': 1, 'Lorde': 1, 'Joshua Bassett': 1, 'ZAYN': 1, 'Lana Del Rey': 1, 'Troye Sivan': 1}\n","\n","Recommendations received:\n","           artist                           song genre  emotion     score  boosted_score\n","519    Little Mix               These Four Walls   pop  sadness  0.907663       1.007663\n","624   Miley Cyrus                   Twinkle Song   pop     fear  0.862727       0.962727\n","138   Miley Cyrus  Santa Claus Is Coming To Town   pop     love  0.854730       0.954730\n","385    Katy Perry            Not Like The Movies   pop  sadness  0.850315       0.950315\n","77   Lana Del Rey                       Ooh Baby   pop      joy  0.839030       0.939030\n","327    Ed Sheeran                     Lego House   pop  sadness  0.810639       0.910639\n","346    Ed Sheeran                           This   pop      joy  0.800478       0.900478\n","460  Lana Del Rey                     Lucky Ones   pop  sadness  0.786658       0.886658\n","258         Adele                    Take It All   pop  sadness  0.777601       0.877601\n","9           Adele               Someone Like You   pop  sadness  0.775419       0.875419\n","Zeroed score for same song+artist: Empty DataFrame\n","Columns: [artist, song, genre, emotion, score, boosted_score]\n","Index: []\n","Removed same song+artist from recommendations.\n","\n","Max similarity score in recommendations: 0.9077\n","\n","✅ Acceptable recommendation found with score 0.9077.\n"]}]},{"cell_type":"code","source":["print(recommended)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKNADSdB7ER6","executionInfo":{"status":"ok","timestamp":1746168926551,"user_tz":-180,"elapsed":5,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"752449db-6c9f-4a11-f75a-a3f844a63b3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           artist                           song genre  emotion     score  boosted_score\n","519    Little Mix               These Four Walls   pop  sadness  0.907663       1.007663\n","624   Miley Cyrus                   Twinkle Song   pop     fear  0.862727       0.962727\n","138   Miley Cyrus  Santa Claus Is Coming To Town   pop     love  0.854730       0.954730\n","385    Katy Perry            Not Like The Movies   pop  sadness  0.850315       0.950315\n","77   Lana Del Rey                       Ooh Baby   pop      joy  0.839030       0.939030\n","327    Ed Sheeran                     Lego House   pop  sadness  0.810639       0.910639\n","346    Ed Sheeran                           This   pop      joy  0.800478       0.900478\n","460  Lana Del Rey                     Lucky Ones   pop  sadness  0.786658       0.886658\n","258         Adele                    Take It All   pop  sadness  0.777601       0.877601\n","9           Adele               Someone Like You   pop  sadness  0.775419       0.875419\n"]}]},{"cell_type":"code","source":["while True:\n","    print(\"\\n--- Music Recommender ---\")\n","    artist = input(\"Enter artist name (or 'quit' to exit): \").strip()\n","    if artist.lower() == 'quit':\n","        print(\"Exiting recommendation system.\")\n","        break\n","\n","    song = input(\"Enter song name: \").strip()\n","    dataset = input(\"Search in which dataset? ('train', 'test', 'all'): \").strip().lower()\n","\n","    recommended = recommend_songs(artist, song, dataset=dataset)\n","\n","    if recommended is not None:\n","        print(f\"Recommendations similar to '{song}' by {artist}:\")\n","        print(recommended)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GSHehwJy3PB8","executionInfo":{"status":"ok","timestamp":1746148422136,"user_tz":-180,"elapsed":3257,"user":{"displayName":"Tahel Barak","userId":"08555115476902020877"}},"outputId":"c76d35ac-7f35-4e3a-cfb5-0f85e3ed2af6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Music Recommender ---\n","Enter artist name (or 'quit' to exit): quit\n","Exiting recommendation system.\n"]}]}]}